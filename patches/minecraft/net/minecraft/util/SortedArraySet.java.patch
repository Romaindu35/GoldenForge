--- a/net/minecraft/util/SortedArraySet.java
+++ b/net/minecraft/util/SortedArraySet.java
@@ -9,8 +_,8 @@
 
 public class SortedArraySet<T> extends AbstractSet<T> {
    private final Comparator<T> field_226169_a_;
-   private T[] field_226170_b_;
-   private int field_226171_c_;
+   private T[] field_226170_b_; private final T[] getBackingArray() { return this.field_226170_b_; } // Paper - OBFHELPER
+   private int field_226171_c_; private final int getSize() { return this.field_226171_c_; } private final void setSize(int value) { this.field_226171_c_ = value; } // Paper - OBFHELPER
 
    private SortedArraySet(int p_i225697_1_, Comparator<T> p_i225697_2_) {
       this.field_226169_a_ = p_i225697_2_;
@@ -20,6 +_,42 @@
          this.field_226170_b_ = (T[])func_226177_a_(new Object[p_i225697_1_]);
       }
    }
+
+   // Paper start - optimise removeIf
+   @Override
+   public boolean removeIf(java.util.function.Predicate<? super T> filter) {
+      // prev. impl used an iterator, which could be n^2 and creates garbage
+      int i = 0, len = this.getSize();
+      T[] backingArray = this.getBackingArray();
+
+      for (;;) {
+         if (i >= len) {
+            return false;
+         }
+         if (!filter.test(backingArray[i])) {
+            ++i;
+            continue;
+         }
+         break;
+      }
+
+      // we only want to write back to backingArray if we really need to
+
+      int lastIndex = i; // this is where new elements are shifted to
+
+      for (; i < len; ++i) {
+         T curr = backingArray[i];
+         if (!filter.test(curr)) { // if test throws we're screwed
+            backingArray[lastIndex++] = curr;
+         }
+      }
+
+      // cleanup end
+      Arrays.fill(backingArray, lastIndex, len, null);
+      this.setSize(lastIndex);
+      return true;
+   }
+   // Paper end - optimise removeIf
 
    public static <T extends Comparable<T>> SortedArraySet<T> func_226172_a_(int p_226172_0_) {
       return new SortedArraySet<>(p_226172_0_, Comparator.<T>naturalOrder());
