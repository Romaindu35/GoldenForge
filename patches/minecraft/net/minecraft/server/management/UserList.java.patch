--- a/net/minecraft/server/management/UserList.java
+++ b/net/minecraft/server/management/UserList.java
@@ -26,7 +_,7 @@
    protected static final Logger field_152693_a = LogManager.getLogger();
    private static final Gson field_232645_b_ = (new GsonBuilder()).setPrettyPrinting().create();
    private final File field_152695_c;
-   private final Map<String, V> field_152696_d = Maps.newHashMap();
+   private final Map<String, V> field_152696_d = Maps.newConcurrentMap(); private final Map<String, V> getBackingMap() { return this.field_152696_d; } // Paper - OBFHELPER
 
    public UserList(File p_i1144_1_) {
       this.field_152695_c = p_i1144_1_;
@@ -49,8 +_,13 @@
 
    @Nullable
    public V func_152683_b(K p_152683_1_) {
-      this.func_152680_h();
-      return this.field_152696_d.get(this.func_152681_a(p_152683_1_));
+      // Paper start
+      return (V) this.getBackingMap().computeIfPresent(this.func_152681_a(p_152683_1_), (k, v) -> {
+         return v.func_73682_e() ? null : v;
+      });
+      // Paper end
+//      this.removeExpired();
+//      return this.map.get(this.getKeyForUser(p_152683_1_));
    }
 
    public void func_152684_c(K p_152684_1_) {
@@ -73,7 +_,8 @@
    }
 
    public boolean func_152690_d() {
-      return this.field_152696_d.size() < 1;
+      //return this.map.size() < 1;
+      return this.getBackingMap().isEmpty(); // Paper - readability is the goal. As an aside, isEmpty() uses only sumCount() and a comparison. size() uses sumCount(), casts, and boolean logic
    }
 
    protected String func_152681_a(K p_152681_1_) {
@@ -85,17 +_,19 @@
    }
 
    private void func_152680_h() {
-      List<K> list = Lists.newArrayList();
-
-      for(V v : this.field_152696_d.values()) {
-         if (v.func_73682_e()) {
-            list.add(v.func_152640_f());
-         }
-      }
-
-      for(K k : list) {
-         this.field_152696_d.remove(this.func_152681_a(k));
-      }
+
+      this.getBackingMap().values().removeIf(UserListEntry::func_73682_e);
+//      List<K> list = Lists.newArrayList();
+//
+//      for(V v : this.map.values()) {
+//         if (v.hasExpired()) {
+//            list.add(v.getUser());
+//         }
+//      }
+//
+//      for(K k : list) {
+//         this.map.remove(this.getKeyForUser(k));
+//      }
 
    }
 
@@ -106,6 +_,7 @@
    }
 
    public void func_152678_f() throws IOException {
+      this.func_152680_h(); // Paper - remove expired values before saving
       JsonArray jsonarray = new JsonArray();
       this.field_152696_d.values().stream().map((p_232646_0_) -> {
          return Util.func_200696_a(new JsonObject(), p_232646_0_::func_152641_a);
