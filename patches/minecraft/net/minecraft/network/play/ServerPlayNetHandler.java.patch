--- a/net/minecraft/network/play/ServerPlayNetHandler.java
+++ b/net/minecraft/network/play/ServerPlayNetHandler.java
@@ -1,5 +_,6 @@
 package net.minecraft.network.play;
 
+import com.destroystokyo.paper.PaperConfig;
 import com.google.common.collect.Lists;
 import com.google.common.primitives.Doubles;
 import com.google.common.primitives.Floats;
@@ -14,6 +_,8 @@
 import java.util.Optional;
 import java.util.Set;
 import java.util.concurrent.CompletableFuture;
+import java.util.concurrent.ExecutionException;
+import java.util.concurrent.atomic.AtomicIntegerFieldUpdater;
 import java.util.function.BiFunction;
 import java.util.function.Consumer;
 import java.util.stream.Collectors;
@@ -150,6 +_,8 @@
 import net.minecraft.world.server.ServerWorld;
 import org.apache.logging.log4j.LogManager;
 import org.apache.logging.log4j.Logger;
+import org.bukkit.craftbukkit.util.Waitable;
+import org.spigotmc.SpigotConfig;
 
 public class ServerPlayNetHandler implements IServerPlayNetHandler {
    private static final Logger field_147370_c = LogManager.getLogger();
@@ -157,10 +_,15 @@
    private final MinecraftServer field_147367_d;
    public ServerPlayerEntity field_147369_b;
    private int field_147368_e;
-   private long field_194402_f;
-   private boolean field_194403_g;
-   private long field_194404_h;
-   private int field_147374_l;
+   private long field_194402_f = Util.func_211177_b(); private void setLastPing(long lastPing) { this.field_194402_f = lastPing;}; private long getLastPing() { return this.field_194402_f;}; // Paper - OBFHELPER
+   private boolean field_194403_g; private void setPendingPing(boolean isPending) { this.field_194403_g = isPending;}; private boolean isPendingPing() { return this.field_194403_g;}; // Paper - OBFHELPER
+   private long field_194404_h; private void setKeepAliveID(long keepAliveID) { this.field_194404_h = keepAliveID;}; private long getKeepAliveID() {return this.field_194404_h; };  // Paper - OBFHELPER
+   // CraftBukkit start - multithreaded fields
+   private volatile int chatThrottle;
+   private static final AtomicIntegerFieldUpdater chatSpamField = AtomicIntegerFieldUpdater.newUpdater(ServerPlayNetHandler.class, "chatThrottle");
+   private final java.util.concurrent.atomic.AtomicInteger tabSpamLimiter = new java.util.concurrent.atomic.AtomicInteger(); // Paper - configurable tab spam limits
+   private final java.util.concurrent.atomic.AtomicInteger recipeSpamPackets =  new java.util.concurrent.atomic.AtomicInteger(); // Paper - auto recipe limit
+   // CraftBukkit end
    private int field_147375_m;
    private final Int2ShortMap field_147372_n = new Int2ShortOpenHashMap();
    private double field_184349_l;
@@ -185,6 +_,13 @@
    private int field_184346_E;
    private int field_184347_F;
    private int field_184348_G;
+   private static final int MAX_SIGN_LINE_LENGTH = Integer.getInteger("Paper.maxSignLength", 80);
+   private static final long KEEPALIVE_LIMIT = Long.getLong("paper.playerconnection.keepalive", 30) * 1000; // Paper - provide property to set keepalive limit
+
+   public boolean processedDisconnect;
+   private boolean justTeleported = false;
+   private int lastDropTick = MinecraftServer.currentTick;
+   private int dropCount = 0;
 
    public ServerPlayNetHandler(MinecraftServer p_i1530_1_, NetworkManager p_i1530_2_, ServerPlayerEntity p_i1530_3_) {
       this.field_147367_d = p_i1530_1_;
@@ -211,7 +_,7 @@
       if (this.field_184344_B && !this.field_147369_b.func_70608_bn()) {
          if (++this.field_147365_f > 80) {
             field_147370_c.warn("{} was kicked for floating too long!", (Object)this.field_147369_b.func_200200_C_().getString());
-            this.func_194028_b(new TranslationTextComponent("multiplayer.disconnect.flying"));
+            this.func_194028_b(new TranslationTextComponent(PaperConfig.flyingKickPlayerMessage));
             return;
          }
       } else {
@@ -230,7 +_,7 @@
          if (this.field_184345_D && this.field_147369_b.func_184208_bv().func_184179_bs() == this.field_147369_b) {
             if (++this.field_184346_E > 80) {
                field_147370_c.warn("{} was kicked for floating a vehicle too long!", (Object)this.field_147369_b.func_200200_C_().getString());
-               this.func_194028_b(new TranslationTextComponent("multiplayer.disconnect.flying"));
+               this.func_194028_b(new TranslationTextComponent(PaperConfig.flyingKickVehicleMessage));
                return;
             }
          } else {
@@ -244,28 +_,58 @@
       }
 
       this.field_147367_d.func_213185_aS().func_76320_a("keepAlive");
-      long i = Util.func_211177_b();
-      if (i - this.field_194402_f >= 15000L) {
-         if (this.field_194403_g) {
-            this.func_194028_b(new TranslationTextComponent("disconnect.timeout"));
-         } else {
-            this.field_194403_g = true;
-            this.field_194402_f = i;
-            this.field_194404_h = i;
-            this.func_147359_a(new SKeepAlivePacket(this.field_194404_h));
+      // Paper Start - give clients a longer time to respond to pings as per pre 1.12.2 timings
+      // This should effectively place the keepalive handling back to "as it was" before 1.12.2
+      long currentTime = Util.func_211177_b();
+      long elapsedTime = currentTime - this.getLastPing();
+
+      if (this.isPendingPing()) {
+         if (!this.processedDisconnect && elapsedTime >= KEEPALIVE_LIMIT) { // check keepalive limit, don't fire if already disconnected
+            field_147370_c.warn("{} was kicked due to keepalive timeout!", this.field_147369_b.func_200200_C_()); // more info
+            this.func_194028_b(new TranslationTextComponent("disconnect.timeout", new Object[0]));
+         }
+      } else {
+         if (elapsedTime >= 15000L) { // 15 seconds
+            this.setPendingPing(true);
+            this.setLastPing(currentTime);
+            this.setKeepAliveID(currentTime);
+            this.func_147359_a(new SKeepAlivePacket(this.getKeepAliveID()));
          }
       }
+      // Paper end
+//      long i = Util.getMillis();
+//      if (i - this.keepAliveTime >= 15000L) {
+//         if (this.keepAlivePending) {
+//            this.disconnect(new TranslationTextComponent("disconnect.timeout"));
+//         } else {
+//            this.keepAlivePending = true;
+//            this.keepAliveTime = i;
+//            this.keepAliveChallenge = i;
+//            this.send(new SKeepAlivePacket(this.keepAliveChallenge));
+//         }
+//      }
 
       this.field_147367_d.func_213185_aS().func_76319_b();
-      if (this.field_147374_l > 0) {
-         --this.field_147374_l;
-      }
-
-      if (this.field_147375_m > 0) {
-         --this.field_147375_m;
-      }
+      // CraftBukkit start
+      for (int spam; (spam = this.chatThrottle) > 0 && !chatSpamField.compareAndSet(this, spam, spam - 1); ) ;
+      if (tabSpamLimiter.get() > 0) tabSpamLimiter.getAndDecrement(); // Paper - split to seperate variable
+      if (recipeSpamPackets.get() > 0) recipeSpamPackets.getAndDecrement(); // Paper
+        /* Use thread-safe field access instead
+        if (this.chatThrottle > 0) {
+            --this.chatThrottle;
+        }
+        */
+      // CraftBukkit end
+//      if (this.chatSpamTickCount > 0) {
+//         --this.chatSpamTickCount;
+//      }
+//
+//      if (this.dropSpamTickCount > 0) {
+//         --this.dropSpamTickCount;
+//      }
 
       if (this.field_147369_b.func_154331_x() > 0L && this.field_147367_d.func_143007_ar() > 0 && Util.func_211177_b() - this.field_147369_b.func_154331_x() > (long)(this.field_147367_d.func_143007_ar() * 1000 * 60)) {
+         this.field_147369_b.func_143004_u(); // CraftBukkit - SPIGOT-854
          this.func_194028_b(new TranslationTextComponent("multiplayer.disconnect.idling"));
       }
 
@@ -289,11 +_,14 @@
    }
 
    public void func_194028_b(ITextComponent p_194028_1_) {
+      if (this.processedDisconnect) {
+         return;
+      }
       this.field_147371_a.func_201058_a(new SDisconnectPacket(p_194028_1_), (p_210161_2_) -> {
          this.field_147371_a.func_150718_a(p_194028_1_);
       });
-      this.field_147371_a.func_150721_g();
-      this.field_147367_d.func_213167_f(this.field_147371_a::func_179293_l);
+      //this.connection.setReadOnly(); //TODO: check if this is needed, in paper its this.networkManager.getClass(); wtf ?!
+      this.field_147367_d.scheduleOnMain(this.field_147371_a::func_179293_l); // Paper
    }
 
    private <T> void func_244533_a(T p_244533_1_, Consumer<T> p_244533_2_, BiFunction<IChatFilter, T, CompletableFuture<Optional<T>>> p_244533_3_) {
@@ -352,20 +_,45 @@
          Entity entity = this.field_147369_b.func_184208_bv();
          if (entity != this.field_147369_b && entity.func_184179_bs() == this.field_147369_b && entity == this.field_184355_r) {
             ServerWorld serverworld = this.field_147369_b.func_71121_q();
-            double d0 = entity.func_226277_ct_();
-            double d1 = entity.func_226278_cu_();
-            double d2 = entity.func_226281_cx_();
-            double d3 = p_184338_1_.func_187004_a();
-            double d4 = p_184338_1_.func_187002_b();
-            double d5 = p_184338_1_.func_187003_c();
+            double d0 = entity.func_226277_ct_(); double fromX = d0; // Paper - OBFHELPER
+            double d1 = entity.func_226278_cu_(); double fromY = d1; // Paper - OBFHELPER
+            double d2 = entity.func_226281_cx_(); double fromZ = d2; // Paper - OBFHELPER
+            double d3 = p_184338_1_.func_187004_a(); double toX = d3; // Paper - OBFHELPER
+            double d4 = p_184338_1_.func_187002_b(); double toY = d4; // Paper - OBFHELPER
+            double d5 = p_184338_1_.func_187003_c(); double toZ = d5; // Paper - OBFHELPER
             float f = p_184338_1_.func_187006_d();
             float f1 = p_184338_1_.func_187005_e();
             double d6 = d3 - this.field_184356_s;
             double d7 = d4 - this.field_184357_t;
             double d8 = d5 - this.field_184358_u;
             double d9 = entity.func_213322_ci().func_189985_c();
-            double d10 = d6 * d6 + d7 * d7 + d8 * d8;
-            if (d10 - d9 > 100.0D && !this.func_217264_d()) {
+            //double d10 = d6 * d6 + d7 * d7 + d8 * d8;
+            // Paper start - fix large move vectors killing the server
+            double currDeltaX = toX - fromX;
+            double currDeltaY = toY - fromY;
+            double currDeltaZ = toZ - fromZ;
+            double d10 = Math.max(d6 * d6 + d7 * d7 + d8 * d8, (currDeltaX * currDeltaX + currDeltaY * currDeltaY + currDeltaZ * currDeltaZ) - 1);
+            // Paper end - fix large move vectors killing the server
+
+            ++this.field_184347_F;
+            int i = this.field_184347_F - this.field_184348_G;
+
+            double speed;
+            if (field_147369_b.field_71075_bZ.field_75100_b) {
+               speed = field_147369_b.field_71075_bZ.func_75093_a() * 20f;
+            } else {
+               speed = field_147369_b.field_71075_bZ.func_75094_b() * 10f;
+            }
+            speed *= 2f; // TODO: Get the speed of the vehicle instead of the player
+
+            // Paper start - Prevent moving into unloaded chunks
+            if (field_147369_b.field_70170_p.paperConfig.preventMovingIntoUnloadedChunks && serverworld.getChunkIfLoadedImmediately((int) Math.floor(p_184338_1_.func_187004_a()) >> 4, (int) Math.floor(p_184338_1_.func_187003_c()) >> 4) == null) {
+               this.field_147371_a.func_179290_a(new SMoveVehiclePacket(entity));
+               return;
+            }
+            // Paper end
+
+            if (d10 - d9 > Math.max(100.0D, Math.pow((double) (org.spigotmc.SpigotConfig.movedTooQuicklyMultiplier * (float) i * speed), 2)) && !this.func_217264_d()) {
                field_147370_c.warn("{} (vehicle of {}) moved too quickly! {},{},{}", entity.func_200200_C_().getString(), this.field_147369_b.func_200200_C_().getString(), d6, d7, d8);
                this.field_147371_a.func_179290_a(new SMoveVehiclePacket(entity));
                return;
@@ -385,15 +_,17 @@
             d8 = d5 - entity.func_226281_cx_();
             d10 = d6 * d6 + d7 * d7 + d8 * d8;
             boolean flag1 = false;
-            if (d10 > 0.0625D) {
+            if (d10 > SpigotConfig.movedWronglyThreshold) {
                flag1 = true;
                field_147370_c.warn("{} (vehicle of {}) moved wrongly! {}", entity.func_200200_C_().getString(), this.field_147369_b.func_200200_C_().getString(), Math.sqrt(d10));
             }
 
             entity.func_70080_a(d3, d4, d5, f, f1);
+            this.field_147369_b.func_70080_a(d3, d4, d5, this.field_147369_b.field_70177_z, this.field_147369_b.field_70125_A); // Forge - Resync player position on vehicle moving
             boolean flag2 = serverworld.func_226665_a__(entity, entity.func_174813_aQ().func_186664_h(0.0625D));
             if (flag && (flag1 || !flag2)) {
                entity.func_70080_a(d0, d1, d2, f, f1);
+               this.field_147369_b.func_70080_a(d3, d4, d5, this.field_147369_b.field_70177_z, this.field_147369_b.field_70125_A); // Forge - Resync player position on vehicle moving
                this.field_147371_a.func_179290_a(new SMoveVehiclePacket(entity));
                return;
             }
@@ -410,13 +_,14 @@
    }
 
    private boolean func_241162_a_(Entity p_241162_1_) {
-      return p_241162_1_.field_70170_p.func_234853_a_(p_241162_1_.func_174813_aQ().func_186662_g(0.0625D).func_72321_a(0.0D, -0.55D, 0.0D)).allMatch(AbstractBlock.AbstractBlockState::func_196958_f);
+      return BlockPos.func_239581_a_(p_241162_1_.func_174813_aQ().func_186662_g(0.0625D).func_72321_a(0.0D, -0.55D, 0.0D)).allMatch(b -> p_241162_1_.field_70170_p.func_180495_p(b).isAir(p_241162_1_.field_70170_p, b));
    }
 
    public void func_184339_a(CConfirmTeleportPacket p_184339_1_) {
       PacketThreadUtil.func_218796_a(p_184339_1_, this, this.field_147369_b.func_71121_q());
       if (p_184339_1_.func_186987_a() == this.field_184363_z) {
-         this.field_147369_b.func_70080_a(this.field_184362_y.field_72450_a, this.field_184362_y.field_72448_b, this.field_184362_y.field_72449_c, this.field_147369_b.field_70177_z, this.field_147369_b.field_70125_A);
+         // Paper - use proper setPositionRotation for teleportation
+         this.field_147369_b.func_70012_b(this.field_184362_y.field_72450_a, this.field_184362_y.field_72448_b, this.field_184362_y.field_72449_c, this.field_147369_b.field_70177_z, this.field_147369_b.field_70125_A);
          this.field_184352_o = this.field_184362_y.field_72450_a;
          this.field_184353_p = this.field_184362_y.field_72448_b;
          this.field_184354_q = this.field_184362_y.field_72449_c;
@@ -425,6 +_,7 @@
          }
 
          this.field_184362_y = null;
+         this.field_147369_b.getWorldServer().func_72863_F().func_217221_a(this.field_147369_b); // CraftBukkit
       }
 
    }
@@ -452,15 +_,31 @@
    }
 
    public void func_195518_a(CTabCompletePacket p_195518_1_) {
-      PacketThreadUtil.func_218796_a(p_195518_1_, this, this.field_147369_b.func_71121_q());
+      //PacketThreadUtil.ensureRunningOnSameThread(p_195518_1_, this, this.player.getLevel());
+      // CraftBukkit start
+      if (tabSpamLimiter.addAndGet(com.destroystokyo.paper.PaperConfig.tabSpamIncrement) > com.destroystokyo.paper.PaperConfig.tabSpamLimit && ! MinecraftServer.getServer().func_184103_al().func_152596_g(this.field_147369_b.func_146103_bH())) { // Paper start - split and make configurable
+         MinecraftServer.getServer().scheduleOnMain(() -> this.func_194028_b(new TranslationTextComponent("disconnect.spam", new Object[0]))); // Paper
+         return;
+      }
+      // Paper start
+      String str = p_195518_1_.func_197707_b(); int index = -1;
+      if (str.length() > 64 && ((index = str.indexOf(' ')) == -1 || index >= 64)) {
+         MinecraftServer.getServer().scheduleOnMain(() -> this.func_194028_b(new TranslationTextComponent("disconnect.spam", new Object[0]))); // Paper
+         return;
+      }
+      // Paper end
       StringReader stringreader = new StringReader(p_195518_1_.func_197707_b());
       if (stringreader.canRead() && stringreader.peek() == '/') {
          stringreader.skip();
       }
 
-      ParseResults<CommandSource> parseresults = this.field_147367_d.func_195571_aL().func_197054_a().parse(stringreader, this.field_147369_b.func_195051_bN());
-      this.field_147367_d.func_195571_aL().func_197054_a().getCompletionSuggestions(parseresults).thenAccept((p_195519_2_) -> {
-         this.field_147371_a.func_179290_a(new STabCompletePacket(p_195518_1_.func_197709_a(), p_195519_2_));
+      //TODO: implement paper async logic
+      MinecraftServer.getServer().scheduleOnMain(() -> {
+
+         ParseResults<CommandSource> parseresults = this.field_147367_d.func_195571_aL().func_197054_a().parse(stringreader, this.field_147369_b.func_195051_bN());
+         this.field_147367_d.func_195571_aL().func_197054_a().getCompletionSuggestions(parseresults).thenAccept((p_195519_2_) -> {
+            this.field_147371_a.func_179290_a(new STabCompletePacket(p_195518_1_.func_197709_a(), p_195519_2_));
+         });
       });
    }
 
@@ -546,6 +_,13 @@
 
    public void func_210152_a(CPickItemPacket p_210152_1_) {
       PacketThreadUtil.func_218796_a(p_210152_1_, this, this.field_147369_b.func_71121_q());
+      // Paper start - validate pick item position
+      if (!(p_210152_1_.func_210349_a() >= 0 && p_210152_1_.func_210349_a() < this.field_147369_b.field_71071_by.field_70462_a.size())) {
+         field_147370_c.warn("{} tried to set an invalid carried item", this.field_147369_b.func_145748_c_().getString());
+         this.func_194028_b(new StringTextComponent("Invalid hotbar selection (Hacking?)"));
+         return;
+      }
+      // Paper end
       this.field_147369_b.field_71071_by.func_184430_d(p_210152_1_.func_210349_a());
       this.field_147369_b.field_71135_a.func_147359_a(new SSetSlotPacket(-2, this.field_147369_b.field_71071_by.field_70461_c, this.field_147369_b.field_71071_by.func_70301_a(this.field_147369_b.field_71071_by.field_70461_c)));
       this.field_147369_b.field_71135_a.func_147359_a(new SSetSlotPacket(-2, p_210152_1_.func_210349_a(), this.field_147369_b.field_71071_by.func_70301_a(p_210152_1_.func_210349_a())));
@@ -777,20 +_,33 @@
                   this.field_147369_b.func_70080_a(this.field_147369_b.func_226277_ct_(), this.field_147369_b.func_226278_cu_(), this.field_147369_b.func_226281_cx_(), p_147347_1_.func_186999_a(this.field_147369_b.field_70177_z), p_147347_1_.func_186998_b(this.field_147369_b.field_70125_A));
                   this.field_147369_b.func_71121_q().func_72863_F().func_217221_a(this.field_147369_b);
                } else {
+                  // CraftBukkit - Make sure the move is valid but then reset it for plugins to modify
+                  double prevX = field_147369_b.func_226277_ct_();
+                  double prevY = field_147369_b.func_226278_cu_();
+                  double prevZ = field_147369_b.func_226281_cx_();
+                  float prevYaw = field_147369_b.field_70177_z;
+                  float prevPitch = field_147369_b.field_70125_A;
+                  // CraftBukkit end
                   double d0 = this.field_147369_b.func_226277_ct_();
                   double d1 = this.field_147369_b.func_226278_cu_();
                   double d2 = this.field_147369_b.func_226281_cx_();
                   double d3 = this.field_147369_b.func_226278_cu_();
-                  double d4 = p_147347_1_.func_186997_a(this.field_147369_b.func_226277_ct_());
-                  double d5 = p_147347_1_.func_186996_b(this.field_147369_b.func_226278_cu_());
-                  double d6 = p_147347_1_.func_187000_c(this.field_147369_b.func_226281_cx_());
+                  double d4 = p_147347_1_.func_186997_a(this.field_147369_b.func_226277_ct_()); double toX = d4; // Paper - OBFHELPER
+                  double d5 = p_147347_1_.func_186996_b(this.field_147369_b.func_226278_cu_()); double toY = d5; // Paper - OBFHELPER
+                  double d6 = p_147347_1_.func_187000_c(this.field_147369_b.func_226281_cx_()); double toZ = d6; // Paper - OBFHELPER
                   float f = p_147347_1_.func_186999_a(this.field_147369_b.field_70177_z);
                   float f1 = p_147347_1_.func_186998_b(this.field_147369_b.field_70125_A);
                   double d7 = d4 - this.field_184349_l;
                   double d8 = d5 - this.field_184350_m;
                   double d9 = d6 - this.field_184351_n;
                   double d10 = this.field_147369_b.func_213322_ci().func_189985_c();
-                  double d11 = d7 * d7 + d8 * d8 + d9 * d9;
+                  // Paper start - fix large move vectors killing the server
+                  double currDeltaX = toX - prevX;
+                  double currDeltaY = toY - prevY;
+                  double currDeltaZ = toZ - prevZ;
+                  double d11 = Math.max(d7 * d7 + d8 * d8 + d9 * d9, (currDeltaX * currDeltaX + currDeltaY * currDeltaY + currDeltaZ * currDeltaZ) - 1);
+                  // Paper end - fix large move vectors killing the server
+                  //double d11 = d7 * d7 + d8 * d8 + d9 * d9;
                   if (this.field_147369_b.func_70608_bn()) {
                      if (d11 > 1.0D) {
                         this.func_147364_a(this.field_147369_b.func_226277_ct_(), this.field_147369_b.func_226278_cu_(), this.field_147369_b.func_226281_cx_(), p_147347_1_.func_186999_a(this.field_147369_b.field_70177_z), p_147347_1_.func_186998_b(this.field_147369_b.field_70125_A));
@@ -804,9 +_,23 @@
                         i = 1;
                      }
 
+                     double speed;
+                     if (field_147369_b.field_71075_bZ.field_75100_b) {
+                        speed = field_147369_b.field_71075_bZ.func_75093_a() * 20f;
+                     } else {
+                        speed = field_147369_b.field_71075_bZ.func_75094_b() * 10f;
+                     }
+
+                     // Paper start - Prevent moving into unloaded chunks
+                     if (field_147369_b.field_70170_p.paperConfig.preventMovingIntoUnloadedChunks && (this.field_147369_b.func_226277_ct_() != toX || this.field_147369_b.func_226281_cx_() != toZ) && serverworld.getChunkIfLoadedImmediately((int) Math.floor(toX) >> 4, (int) Math.floor(toZ) >> 4) == null) { // Paper - use getIfLoadedImmediately
+                        this.func_175089_a(this.field_147369_b.func_226277_ct_(), this.field_147369_b.func_226278_cu_(), this.field_147369_b.func_226281_cx_(), this.field_147369_b.field_70177_z, this.field_147369_b.field_70125_A, Collections.emptySet());
+                        return;
+                     }
+                     // Paper end
+
                      if (!this.field_147369_b.func_184850_K() && (!this.field_147369_b.func_71121_q().func_82736_K().func_223586_b(GameRules.field_223615_r) || !this.field_147369_b.func_184613_cA())) {
                         float f2 = this.field_147369_b.func_184613_cA() ? 300.0F : 100.0F;
-                        if (d11 - d10 > (double)(f2 * (float)i) && !this.func_217264_d()) {
+                        if (d11 - d10 > Math.max(f2, Math.pow((double) (org.spigotmc.SpigotConfig.movedTooQuicklyMultiplier * (float) i * speed), 2)) && !this.func_217264_d()) {
                            field_147370_c.warn("{} moved too quickly! {},{},{}", this.field_147369_b.func_200200_C_().getString(), d7, d8, d9);
                            this.func_147364_a(this.field_147369_b.func_226277_ct_(), this.field_147369_b.func_226278_cu_(), this.field_147369_b.func_226281_cx_(), this.field_147369_b.field_70177_z, this.field_147369_b.field_70125_A);
                            return;
@@ -832,7 +_,7 @@
                      d9 = d6 - this.field_147369_b.func_226281_cx_();
                      d11 = d7 * d7 + d8 * d8 + d9 * d9;
                      boolean flag1 = false;
-                     if (!this.field_147369_b.func_184850_K() && d11 > 0.0625D && !this.field_147369_b.func_70608_bn() && !this.field_147369_b.field_71134_c.func_73083_d() && this.field_147369_b.field_71134_c.func_73081_b() != GameType.SPECTATOR) {
+                     if (!this.field_147369_b.func_184850_K() && d11 > SpigotConfig.movedWronglyThreshold && !this.field_147369_b.func_70608_bn() && !this.field_147369_b.field_71134_c.func_73083_d() && this.field_147369_b.field_71134_c.func_73081_b() != GameType.SPECTATOR) {
                         flag1 = true;
                         field_147370_c.warn("{} moved wrongly!", (Object)this.field_147369_b.func_200200_C_().getString());
                      }
@@ -876,6 +_,21 @@
    }
 
    public void func_175089_a(double p_175089_1_, double p_175089_3_, double p_175089_5_, float p_175089_7_, float p_175089_8_, Set<SPlayerPositionLookPacket.Flags> p_175089_9_) {
+      if (field_147369_b.field_70128_L) {
+         field_147370_c.info("Attempt to teleport dead player {} restricted", field_147369_b.func_200200_C_());
+         return;
+      }
+      // CraftBukkit start
+      if (Float.isNaN(p_175089_7_)) {
+         p_175089_7_ = 0;
+      }
+      if (Float.isNaN(p_175089_8_)) {
+         p_175089_8_ = 0;
+      }
+
+      this.justTeleported = true;
+      // CraftBukkit end
+
       double d0 = p_175089_9_.contains(SPlayerPositionLookPacket.Flags.X) ? this.field_147369_b.func_226277_ct_() : 0.0D;
       double d1 = p_175089_9_.contains(SPlayerPositionLookPacket.Flags.Y) ? this.field_147369_b.func_226278_cu_() : 0.0D;
       double d2 = p_175089_9_.contains(SPlayerPositionLookPacket.Flags.Z) ? this.field_147369_b.func_226281_cx_() : 0.0D;
@@ -887,7 +_,8 @@
       }
 
       this.field_184343_A = this.field_147368_e;
-      this.field_147369_b.func_70080_a(p_175089_1_, p_175089_3_, p_175089_5_, p_175089_7_, p_175089_8_);
+      this.field_147369_b.func_70012_b(p_175089_1_, p_175089_3_, p_175089_5_, p_175089_7_, p_175089_8_);
+      this.field_147369_b.func_143004_u(); // Paper
       this.field_147369_b.field_71135_a.func_147359_a(new SPlayerPositionLookPacket(p_175089_1_ - d0, p_175089_3_ - d1, p_175089_5_ - d2, p_175089_7_ - f, p_175089_8_ - f1, p_175089_9_, this.field_184363_z));
    }
 
@@ -908,6 +_,21 @@
          return;
       case DROP_ITEM:
          if (!this.field_147369_b.func_175149_v()) {
+            // limit how quickly items can be dropped
+            // If the ticks aren't the same then the count starts from 0 and we update the lastDropTick.
+            if (this.lastDropTick != MinecraftServer.currentTick) {
+               this.dropCount = 0;
+               this.lastDropTick = MinecraftServer.currentTick;
+            } else {
+               // Else we increment the drop count and check the amount.
+               this.dropCount++;
+               if (this.dropCount >= 20) {
+                  field_147370_c.warn(this.field_147369_b.func_200200_C_() + " dropped their items too quickly!");
+                  this.func_194028_b(new StringTextComponent("You dropped your items too quickly (Hacking?)"));
+                  return;
+               }
+            }
+            // CraftBukkit end
             this.field_147369_b.func_225609_n_(false);
          }
 
@@ -924,6 +_,11 @@
       case START_DESTROY_BLOCK:
       case ABORT_DESTROY_BLOCK:
       case STOP_DESTROY_BLOCK:
+         // Paper start - Don't allow digging in unloaded chunks
+         if (this.field_147369_b.field_70170_p.getChunkIfLoadedImmediately(blockpos.func_177958_n() >> 4, blockpos.func_177952_p() >> 4) == null) {
+            return;
+         }
+         // Paper end - Don't allow digging in unloaded chunks
          this.field_147369_b.field_71134_c.func_225416_a(blockpos, cplayerdiggingpacket$action, p_147345_1_.func_179714_b(), this.field_147367_d.func_71207_Z());
          return;
       default:
@@ -950,7 +_,9 @@
       Direction direction = blockraytraceresult.func_216354_b();
       this.field_147369_b.func_143004_u();
       if (blockpos.func_177956_o() < this.field_147367_d.func_71207_Z()) {
-         if (this.field_184362_y == null && this.field_147369_b.func_70092_e((double)blockpos.func_177958_n() + 0.5D, (double)blockpos.func_177956_o() + 0.5D, (double)blockpos.func_177952_p() + 0.5D) < 64.0D && serverworld.func_175660_a(this.field_147369_b, blockpos)) {
+         double dist = field_147369_b.func_110148_a(net.minecraftforge.common.ForgeMod.REACH_DISTANCE.get()).func_111126_e() + 3;
+         dist *= dist;
+         if (this.field_184362_y == null && this.field_147369_b.func_70092_e((double)blockpos.func_177958_n() + 0.5D, (double)blockpos.func_177956_o() + 0.5D, (double)blockpos.func_177952_p() + 0.5D) < dist && serverworld.func_175660_a(this.field_147369_b, blockpos)) {
             ActionResultType actionresulttype = this.field_147369_b.field_71134_c.func_219441_a(this.field_147369_b, serverworld, itemstack, hand, blockraytraceresult);
             if (direction == Direction.UP && !actionresulttype.func_226246_a_() && blockpos.func_177956_o() >= this.field_147367_d.func_71207_Z() - 1 && func_241166_a_(this.field_147369_b, itemstack)) {
                ITextComponent itextcomponent = (new TranslationTextComponent("build.tooHigh", this.field_147367_d.func_71207_Z())).func_240699_a_(TextFormatting.RED);
@@ -1010,6 +_,13 @@
    }
 
    public void func_147231_a(ITextComponent p_147231_1_) {
+      // CraftBukkit start - Rarely it would send a disconnect line twice
+      if (this.processedDisconnect) {
+         return;
+      } else {
+         this.processedDisconnect = true;
+      }
+      // CraftBukkit end
       field_147370_c.info("{} lost connection: {}", this.field_147369_b.func_200200_C_().getString(), p_147231_1_.getString());
       this.field_147367_d.func_147132_au();
       this.field_147367_d.func_184103_al().func_232641_a_((new TranslationTextComponent("multiplayer.player.left", this.field_147369_b.func_145748_c_())).func_240699_a_(TextFormatting.YELLOW), ChatType.SYSTEM, Util.field_240973_b_);
@@ -1067,16 +_,22 @@
          this.field_147369_b.func_143004_u();
       } else {
          field_147370_c.warn("{} tried to set an invalid carried item", (Object)this.field_147369_b.func_200200_C_().getString());
+         this.func_194028_b(new StringTextComponent("Invalid hotbar selection (Hacking?)")); // CraftBukkit
       }
    }
 
    public void func_147354_a(CChatMessagePacket p_147354_1_) {
+      if (MinecraftServer.getServer().func_71241_aa()) {
+         return;
+      }
+
       String s = org.apache.commons.lang3.StringUtils.normalizeSpace(p_147354_1_.func_149439_c());
       if (s.startsWith("/")) {
          PacketThreadUtil.func_218796_a(p_147354_1_, this, this.field_147369_b.func_71121_q());
          this.func_244548_c(s);
       } else {
-         this.func_244535_a(s, this::func_244548_c);
+         //this.filterTextPacket(s, this::handleChat);
+         this.func_244548_c(s);
       }
 
    }
@@ -1087,29 +_,100 @@
       } else {
          this.field_147369_b.func_143004_u();
 
-         for(int i = 0; i < p_244548_1_.length(); ++i) {
+         boolean isSync = p_244548_1_.startsWith("/"); // CraftBukkit
+         for (int i = 0; i < p_244548_1_.length(); ++i) {
             if (!SharedConstants.func_71566_a(p_244548_1_.charAt(i))) {
-               this.func_194028_b(new TranslationTextComponent("multiplayer.disconnect.illegal_characters"));
+               // CraftBukkit start - threadsafety
+               if (!p_244548_1_.startsWith("/")) {
+                  Waitable waitable = new Waitable() {
+                     @Override
+                     protected Object evaluate() {
+                        ServerPlayNetHandler.this.func_194028_b(new TranslationTextComponent("multiplayer.disconnect.illegal_characters"));
+                        return null;
+                     }
+                  };
+
+                  MinecraftServer.getServer().processQueue.add(waitable);
+
+                  try {
+                     waitable.get();
+                  } catch (InterruptedException e) {
+                     Thread.currentThread().interrupt();
+                  } catch (ExecutionException e) {
+                     throw new RuntimeException(e);
+                  }
+               } else {
+                  this.func_194028_b(new TranslationTextComponent("multiplayer.disconnect.illegal_characters"));
+               }
+               // CraftBukkit end
                return;
             }
          }
 
-         if (p_244548_1_.startsWith("/")) {
+
+//         for(int i = 0; i < p_244548_1_.length(); ++i) {
+//            if (!SharedConstants.isAllowedChatCharacter(p_244548_1_.charAt(i))) {
+//               this.disconnect(new TranslationTextComponent("multiplayer.disconnect.illegal_characters"));
+//               return;
+//            }
+//         }
+
+         if (isSync) {
             this.func_147361_d(p_244548_1_);
          } else {
-            ITextComponent itextcomponent = new TranslationTextComponent("chat.type.text", this.field_147369_b.func_145748_c_(), p_244548_1_);
+            ITextComponent itextcomponent = new TranslationTextComponent("chat.type.text", this.field_147369_b.func_145748_c_(), net.minecraftforge.common.ForgeHooks.newChatWithLinks(p_244548_1_));
+            itextcomponent = net.minecraftforge.common.ForgeHooks.onServerChatEvent(this, p_244548_1_, itextcomponent);
+            if (itextcomponent == null) return;
             this.field_147367_d.func_184103_al().func_232641_a_(itextcomponent, ChatType.CHAT, this.field_147369_b.func_110124_au());
          }
 
-         this.field_147374_l += 20;
-         if (this.field_147374_l > 200 && !this.field_147367_d.func_184103_al().func_152596_g(this.field_147369_b.func_146103_bH())) {
-            this.func_194028_b(new TranslationTextComponent("disconnect.spam"));
-         }
-
+         // Spigot start - spam exclusions
+         boolean counted = true;
+         for (String exclude : org.spigotmc.SpigotConfig.spamExclusions) {
+            if (exclude != null && p_244548_1_.startsWith(exclude)) {
+               counted = false;
+               break;
+            }
+         }
+         // Spigot end
+         // CraftBukkit start - replaced with thread safe throttle
+         // this.chatThrottle += 20;
+         if (counted && chatSpamField.addAndGet(this, 20) > 200 && !MinecraftServer.getServer().func_184103_al().func_152596_g(this.field_147369_b.func_146103_bH())) { // Spigot
+            if (!isSync) {
+               Waitable waitable = new Waitable() {
+                  @Override
+                  protected Object evaluate() {
+                     ServerPlayNetHandler.this.func_194028_b(new TranslationTextComponent("disconnect.spam"));
+                     return null;
+                  }
+               };
+
+               MinecraftServer.getServer().processQueue.add(waitable);
+
+               try {
+                  waitable.get();
+               } catch (InterruptedException e) {
+                  Thread.currentThread().interrupt();
+               } catch (ExecutionException e) {
+                  throw new RuntimeException(e);
+               }
+            } else {
+               this.func_194028_b(new TranslationTextComponent("disconnect.spam"));
+            }
+            // CraftBukkit end
+
+//         this.chatSpamTickCount += 20;
+//         if (this.chatSpamTickCount > 200 && !this.server.getPlayerList().isOp(this.player.getGameProfile())) {
+//            this.disconnect(new TranslationTextComponent("disconnect.spam"));
+//         }
+
+         }
       }
    }
 
    private void func_147361_d(String p_147361_1_) {
+      if ( SpigotConfig.logCommands )
+         this.field_147370_c.info(this.field_147369_b.func_200200_C_().getString() + " issued server command: " + p_147361_1_);
       this.field_147367_d.func_195571_aL().func_197059_a(this.field_147369_b.func_195051_bN(), p_147361_1_);
    }
 
@@ -1187,6 +_,7 @@
             if (p_147340_1_.func_149565_c() == CUseEntityPacket.Action.INTERACT) {
                optional = Optional.of(this.field_147369_b.func_190775_a(entity, hand));
             } else if (p_147340_1_.func_149565_c() == CUseEntityPacket.Action.INTERACT_AT) {
+               if (net.minecraftforge.common.ForgeHooks.onInteractEntityAt(field_147369_b, entity, p_147340_1_.func_179712_b(), hand) != null) return;
                optional = Optional.of(entity.func_184199_a(this.field_147369_b, p_147340_1_.func_179712_b(), hand));
             } else if (p_147340_1_.func_149565_c() == CUseEntityPacket.Action.ATTACK) {
                if (entity instanceof ItemEntity || entity instanceof ExperienceOrbEntity || entity instanceof AbstractArrowEntity || entity == this.field_147369_b) {
@@ -1402,6 +_,8 @@
    }
 
    public void func_147349_a(CCustomPayloadPacket p_147349_1_) {
+      PacketThreadUtil.func_218796_a(p_147349_1_, this, this.field_147369_b.func_71121_q());
+      net.minecraftforge.fml.network.NetworkHooks.onCustomPayload(p_147349_1_, this.field_147371_a);
    }
 
    public void func_217263_a(CSetDifficultyPacket p_217263_1_) {
