--- a/net/minecraft/network/login/ServerLoginNetHandler.java
+++ b/net/minecraft/network/login/ServerLoginNetHandler.java
@@ -29,6 +_,7 @@
 import net.minecraft.util.CryptManager;
 import net.minecraft.util.DefaultUncaughtExceptionHandler;
 import net.minecraft.util.text.ITextComponent;
+import net.minecraft.util.text.StringTextComponent;
 import net.minecraft.util.text.TranslationTextComponent;
 import org.apache.commons.lang3.Validate;
 import org.apache.logging.log4j.LogManager;
@@ -41,7 +_,7 @@
    private final byte[] field_147330_e = new byte[4];
    private final MinecraftServer field_147327_f;
    public final NetworkManager field_147333_a;
-   private ServerLoginNetHandler.State field_147328_g = ServerLoginNetHandler.State.HELLO;
+   private ServerLoginNetHandler.State field_147328_g = ServerLoginNetHandler.State.HELLO; public final ServerLoginNetHandler.State getLoginState() { return this.field_147328_g; }; // Paper - OBFHELPER
    private int field_147336_h;
    private GameProfile field_147337_i;
    private final String field_147334_j = "";
@@ -55,10 +_,26 @@
    }
 
    public void func_73660_a() {
-      if (this.field_147328_g == ServerLoginNetHandler.State.READY_TO_ACCEPT) {
-         this.func_147326_c();
+      // Paper start - Do not allow logins while the server is shutting down
+      if (!MinecraftServer.getServer().func_71278_l()) {
+         this.func_194026_b(new StringTextComponent(org.spigotmc.SpigotConfig.restartMessage));
+         return;
+      }
+      // Paper end
+      if (this.field_147328_g == State.NEGOTIATING) {
+         // We force the state into "NEGOTIATING" which is otherwise unused. Once we're completed we move the negotiation onto "READY_TO_ACCEPT"
+         // Might want to promote player object creation to here as well..
+         boolean negotiationComplete = net.minecraftforge.fml.network.NetworkHooks.tickNegotiation(this, this.field_147333_a, this.field_181025_l);
+         if (negotiationComplete)
+            this.field_147328_g = State.READY_TO_ACCEPT;
+      } else if (this.field_147328_g == ServerLoginNetHandler.State.READY_TO_ACCEPT) {
+         // Paper start - prevent logins to be processed even though disconnect was called
+         if (field_147333_a.func_150724_d()) {
+            this.func_147326_c();
+         }
+         // Paper end
       } else if (this.field_147328_g == ServerLoginNetHandler.State.DELAY_ACCEPT) {
-         ServerPlayerEntity serverplayerentity = this.field_147327_f.func_184103_al().func_177451_a(this.field_147337_i.getId());
+         ServerPlayerEntity serverplayerentity = this.field_147327_f.func_184103_al().getActivePlayer(this.field_147337_i.getId()); // Paper
          if (serverplayerentity == null) {
             this.field_147328_g = ServerLoginNetHandler.State.READY_TO_ACCEPT;
             this.field_147327_f.func_184103_al().func_72355_a(this.field_147333_a, this.field_181025_l);
@@ -104,7 +_,7 @@
          }
 
          this.field_147333_a.func_179290_a(new SLoginSuccessPacket(this.field_147337_i));
-         ServerPlayerEntity serverplayerentity = this.field_147327_f.func_184103_al().func_177451_a(this.field_147337_i.getId());
+         ServerPlayerEntity serverplayerentity = this.field_147327_f.func_184103_al().getActivePlayer(this.field_147337_i.getId());// Paper
          if (serverplayerentity != null) {
             this.field_147328_g = ServerLoginNetHandler.State.DELAY_ACCEPT;
             this.field_181025_l = this.field_147327_f.func_184103_al().func_148545_a(this.field_147337_i);
@@ -130,7 +_,7 @@
          this.field_147328_g = ServerLoginNetHandler.State.KEY;
          this.field_147333_a.func_179290_a(new SEncryptionRequestPacket("", this.field_147327_f.func_71250_E().getPublic().getEncoded(), this.field_147330_e));
       } else {
-         this.field_147328_g = ServerLoginNetHandler.State.READY_TO_ACCEPT;
+         this.field_147328_g = ServerLoginNetHandler.State.NEGOTIATING;
       }
 
    }
@@ -155,7 +_,7 @@
          throw new IllegalStateException("Protocol error", cryptexception);
       }
 
-      Thread thread = new Thread("User Authenticator #" + field_147331_b.incrementAndGet()) {
+         Thread thread = new Thread(net.minecraftforge.fml.common.thread.SidedThreadGroups.SERVER, "User Authenticator #" + field_147331_b.incrementAndGet()) {
          public void run() {
             GameProfile gameprofile = ServerLoginNetHandler.this.field_147337_i;
 
@@ -163,12 +_,16 @@
                ServerLoginNetHandler.this.field_147337_i = ServerLoginNetHandler.this.field_147327_f.func_147130_as().hasJoinedServer(new GameProfile((UUID)null, gameprofile.getName()), s, this.func_191235_a());
                if (ServerLoginNetHandler.this.field_147337_i != null) {
                   ServerLoginNetHandler.field_147332_c.info("UUID of player {} is {}", ServerLoginNetHandler.this.field_147337_i.getName(), ServerLoginNetHandler.this.field_147337_i.getId());
-                  ServerLoginNetHandler.this.field_147328_g = ServerLoginNetHandler.State.READY_TO_ACCEPT;
+                     ServerLoginNetHandler.this.field_147328_g = ServerLoginNetHandler.State.NEGOTIATING;
                } else if (ServerLoginNetHandler.this.field_147327_f.func_71264_H()) {
                   ServerLoginNetHandler.field_147332_c.warn("Failed to verify username but will let them in anyway!");
                   ServerLoginNetHandler.this.field_147337_i = ServerLoginNetHandler.this.func_152506_a(gameprofile);
-                  ServerLoginNetHandler.this.field_147328_g = ServerLoginNetHandler.State.READY_TO_ACCEPT;
+                     ServerLoginNetHandler.this.field_147328_g = ServerLoginNetHandler.State.NEGOTIATING;
                } else {
+                  // Paper start
+                  if (com.destroystokyo.paper.PaperConfig.authenticationServersDownKickMessage != null) {
+                     ServerLoginNetHandler.this.func_194026_b(new TranslationTextComponent(com.destroystokyo.paper.PaperConfig.authenticationServersDownKickMessage));
+                  } else // Paper end
                   ServerLoginNetHandler.this.func_194026_b(new TranslationTextComponent("multiplayer.disconnect.unverified_username"));
                   ServerLoginNetHandler.field_147332_c.error("Username '{}' tried to join with an invalid session", (Object)gameprofile.getName());
                }
@@ -176,7 +_,7 @@
                if (ServerLoginNetHandler.this.field_147327_f.func_71264_H()) {
                   ServerLoginNetHandler.field_147332_c.warn("Authentication servers are down but will let them in anyway!");
                   ServerLoginNetHandler.this.field_147337_i = ServerLoginNetHandler.this.func_152506_a(gameprofile);
-                  ServerLoginNetHandler.this.field_147328_g = ServerLoginNetHandler.State.READY_TO_ACCEPT;
+                     ServerLoginNetHandler.this.field_147328_g = ServerLoginNetHandler.State.NEGOTIATING;
                } else {
                   ServerLoginNetHandler.this.func_194026_b(new TranslationTextComponent("multiplayer.disconnect.authservers_down"));
                   ServerLoginNetHandler.field_147332_c.error("Couldn't verify username because servers are unavailable");
@@ -196,6 +_,7 @@
    }
 
    public void func_209526_a(CCustomPayloadLoginPacket p_209526_1_) {
+      if (!net.minecraftforge.fml.network.NetworkHooks.onCustomPayload(p_209526_1_, this.field_147333_a))
       this.func_194026_b(new TranslationTextComponent("multiplayer.disconnect.unexpected_query_response"));
    }
 
@@ -204,7 +_,7 @@
       return new GameProfile(uuid, p_152506_1_.getName());
    }
 
-   static enum State {
+   public static enum State {
       HELLO,
       KEY,
       AUTHENTICATING,
