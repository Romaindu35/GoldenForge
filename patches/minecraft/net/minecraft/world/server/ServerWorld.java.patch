--- a/net/minecraft/world/server/ServerWorld.java
+++ b/net/minecraft/world/server/ServerWorld.java
@@ -1,5 +_,7 @@
 package net.minecraft.world.server;
 
+import com.destroystokyo.paper.server.ticklist.PaperTickList;
+import com.destroystokyo.paper.util.MCUtil;
 import com.google.common.annotations.VisibleForTesting;
 import com.google.common.collect.Iterables;
 import com.google.common.collect.Lists;
@@ -40,12 +_,7 @@
 import net.minecraft.block.BlockState;
 import net.minecraft.block.Blocks;
 import net.minecraft.crash.CrashReport;
-import net.minecraft.entity.Entity;
-import net.minecraft.entity.EntityClassification;
-import net.minecraft.entity.EntityType;
-import net.minecraft.entity.INPC;
-import net.minecraft.entity.LivingEntity;
-import net.minecraft.entity.MobEntity;
+import net.minecraft.entity.*;
 import net.minecraft.entity.boss.dragon.EnderDragonEntity;
 import net.minecraft.entity.boss.dragon.EnderDragonPartEntity;
 import net.minecraft.entity.effect.LightningBoltEntity;
@@ -60,6 +_,7 @@
 import net.minecraft.fluid.FluidState;
 import net.minecraft.fluid.Fluids;
 import net.minecraft.item.crafting.RecipeManager;
+import net.minecraft.nbt.CompoundNBT;
 import net.minecraft.network.DebugPacketSender;
 import net.minecraft.network.IPacket;
 import net.minecraft.network.play.server.SAnimateBlockBreakPacket;
@@ -117,11 +_,9 @@
 import net.minecraft.world.Teleporter;
 import net.minecraft.world.World;
 import net.minecraft.world.biome.Biome;
-import net.minecraft.world.chunk.Chunk;
-import net.minecraft.world.chunk.ChunkSection;
-import net.minecraft.world.chunk.ChunkStatus;
-import net.minecraft.world.chunk.IChunk;
+import net.minecraft.world.chunk.*;
 import net.minecraft.world.chunk.listener.IChunkStatusListener;
+import net.minecraft.world.chunk.storage.RegionFile;
 import net.minecraft.world.end.DragonFightManager;
 import net.minecraft.world.gen.ChunkGenerator;
 import net.minecraft.world.gen.Heightmap;
@@ -143,27 +_,23 @@
 import org.apache.logging.log4j.LogManager;
 import org.apache.logging.log4j.Logger;
 
-public class ServerWorld extends World implements ISeedReader {
+public class ServerWorld extends World implements ISeedReader, net.minecraftforge.common.extensions.IForgeWorldServer {
    public static final BlockPos field_241108_a_ = new BlockPos(100, 50, 0);
    private static final Logger field_147491_a = LogManager.getLogger();
    private final Int2ObjectMap<Entity> field_217498_x = new Int2ObjectLinkedOpenHashMap<>();
    private final Map<UUID, Entity> field_175741_N = Maps.newHashMap();
    private final Queue<Entity> field_217499_z = Queues.newArrayDeque();
-   private final List<ServerPlayerEntity> field_217491_A = Lists.newArrayList();
+   public final List<ServerPlayerEntity> field_217491_A = Lists.newArrayList();
    private final ServerChunkProvider field_241102_C_;
-   boolean field_217492_a;
+   public boolean field_217492_a;
    private final MinecraftServer field_73061_a;
    private final IServerWorldInfo field_241103_E_;
    public boolean field_73058_d;
    private boolean field_73068_P;
    private int field_80004_Q;
    private final Teleporter field_85177_Q;
-   private final ServerTickList<Block> field_94579_S = new ServerTickList<>(this, (p_205341_0_) -> {
-      return p_205341_0_ == null || p_205341_0_.func_176223_P().func_196958_f();
-   }, Registry.field_212618_g::func_177774_c, this::func_205338_b);
-   private final ServerTickList<Fluid> field_205342_P = new ServerTickList<>(this, (p_205774_0_) -> {
-      return p_205774_0_ == null || p_205774_0_ == Fluids.field_204541_a;
-   }, Registry.field_212619_h::func_177774_c, this::func_205339_a);
+   private final ServerTickList<Block> field_94579_S;
+   private final ServerTickList<Fluid> field_205342_P;
    private final Set<PathNavigator> field_217495_I = Sets.newHashSet();
    protected final RaidManager field_217494_c;
    private final ObjectLinkedOpenHashSet<BlockEventData> field_147490_S = new ObjectLinkedOpenHashSet<>();
@@ -173,14 +_,121 @@
    private final DragonFightManager field_241105_O_;
    private final StructureManager field_241106_P_;
    private final boolean field_241107_Q_;
+   private net.minecraftforge.common.util.WorldCapabilityData capabilityData;
+
+   // Paper start - Asynchronous IO
+   public final com.destroystokyo.paper.io.PaperFileIOThread.ChunkDataController poiDataController = new com.destroystokyo.paper.io.PaperFileIOThread.ChunkDataController() {
+      @Override
+      public void writeData(int x, int z, CompoundNBT compound) throws java.io.IOException {
+         ServerWorld.this.func_72863_F().field_217237_a.func_219189_h().func_219100_a(new ChunkPos(x, z), compound);
+      }
+
+      @Override
+      public CompoundNBT readData(int x, int z) throws java.io.IOException {
+         return ServerWorld.this.func_72863_F().field_217237_a.func_219189_h().func_219099_e(new ChunkPos(x, z));
+      }
+
+      @Override
+      public <T> T computeForRegionFile(int chunkX, int chunkZ, java.util.function.Function<RegionFile, T> function) {
+         synchronized (ServerWorld.this.func_72863_F().field_217237_a.func_219189_h()) {
+            RegionFile file;
+
+            try {
+               file = ServerWorld.this.func_72863_F().field_217237_a.func_219189_h().getRegionFile(new ChunkPos(chunkX, chunkZ), false);
+            } catch (java.io.IOException ex) {
+               throw new RuntimeException(ex);
+            }
+
+            return function.apply(file);
+         }
+      }
+
+      @Override
+      public <T> T computeForRegionFileIfLoaded(int chunkX, int chunkZ, java.util.function.Function<RegionFile, T> function) {
+         synchronized (ServerWorld.this.func_72863_F().field_217237_a.func_219189_h()) {
+            RegionFile file = ServerWorld.this.func_72863_F().field_217237_a.func_219189_h().getRegionFileIfLoaded(new ChunkPos(chunkX, chunkZ));
+            return function.apply(file);
+         }
+      }
+   };
+
+   public final com.destroystokyo.paper.io.PaperFileIOThread.ChunkDataController chunkDataController = new com.destroystokyo.paper.io.PaperFileIOThread.ChunkDataController() {
+      @Override
+      public void writeData(int x, int z, CompoundNBT compound) throws java.io.IOException {
+         ServerWorld.this.func_72863_F().field_217237_a.func_219100_a(new ChunkPos(x, z), compound);
+      }
+
+      @Override
+      public CompoundNBT readData(int x, int z) throws java.io.IOException {
+         return ServerWorld.this.func_72863_F().field_217237_a.func_227078_e_(new ChunkPos(x, z));
+      }
+
+      @Override
+      public <T> T computeForRegionFile(int chunkX, int chunkZ, java.util.function.Function<RegionFile, T> function) {
+         synchronized (ServerWorld.this.func_72863_F().field_217237_a) {
+            RegionFile file;
+
+            try {
+               file = ServerWorld.this.func_72863_F().field_217237_a.regionFileCache.getRegionFile(new ChunkPos(chunkX, chunkZ), false);
+            } catch (java.io.IOException ex) {
+               throw new RuntimeException(ex);
+            }
+
+            return function.apply(file);
+         }
+      }
+
+      @Override
+      public <T> T computeForRegionFileIfLoaded(int chunkX, int chunkZ, java.util.function.Function<RegionFile, T> function) {
+         synchronized (ServerWorld.this.func_72863_F().field_217237_a) {
+            RegionFile file = ServerWorld.this.func_72863_F().field_217237_a.regionFileCache.getRegionFileIfLoaded(new ChunkPos(chunkX, chunkZ));
+            return function.apply(file);
+         }
+      }
+   };
+   public final com.destroystokyo.paper.io.chunk.ChunkTaskManager asyncChunkTaskManager;
+   // Paper end
+
+   // Paper start
+   @Override
+   public boolean func_217354_b(int x, int z) {
+      return this.func_72863_F().getChunkAtIfLoadedImmediately(x, z) != null;
+   }
+   // Paper end
+
+   // Paper start - rewrite ticklistserver
+   public void onChunkSetTicking(int chunkX, int chunkZ) {
+      if (com.destroystokyo.paper.PaperConfig.useOptimizedTickList) {
+         ((com.destroystokyo.paper.server.ticklist.PaperTickList) this.field_94579_S).onChunkSetTicking(chunkX, chunkZ);
+         ((com.destroystokyo.paper.server.ticklist.PaperTickList) this.field_205342_P).onChunkSetTicking(chunkX, chunkZ);
+      }
+   }
+   // Paper end - rewrite ticklistserver
 
    public ServerWorld(MinecraftServer p_i241885_1_, Executor p_i241885_2_, SaveFormat.LevelSave p_i241885_3_, IServerWorldInfo p_i241885_4_, RegistryKey<World> p_i241885_5_, DimensionType p_i241885_6_, IChunkStatusListener p_i241885_7_, ChunkGenerator p_i241885_8_, boolean p_i241885_9_, long p_i241885_10_, List<ISpecialSpawner> p_i241885_12_, boolean p_i241885_13_) {
       super(p_i241885_4_, p_i241885_5_, p_i241885_6_, p_i241885_1_::func_213185_aS, false, p_i241885_9_, p_i241885_10_);
       this.field_241107_Q_ = p_i241885_13_;
       this.field_73061_a = p_i241885_1_;
+
+      if (com.destroystokyo.paper.PaperConfig.useOptimizedTickList) {
+         this.field_94579_S = new PaperTickList<>(this, (p_205341_0_) -> {
+            return p_205341_0_ == null || p_205341_0_.func_176223_P().func_196958_f();
+         }, Registry.field_212618_g::func_177774_c, this::func_205338_b);
+         this.field_205342_P = new PaperTickList<>(this, (p_205774_0_) -> {
+            return p_205774_0_ == null || p_205774_0_ == Fluids.field_204541_a;
+         }, Registry.field_212619_h::func_177774_c, this::func_205339_a);
+      } else {
+         this.field_94579_S = new ServerTickList<>(this, (p_205341_0_) -> {
+            return p_205341_0_ == null || p_205341_0_.func_176223_P().func_196958_f();
+         }, Registry.field_212618_g::func_177774_c, this::func_205338_b);
+         this.field_205342_P = new ServerTickList<>(this, (p_205774_0_) -> {
+            return p_205774_0_ == null || p_205774_0_ == Fluids.field_204541_a;
+         }, Registry.field_212619_h::func_177774_c, this::func_205339_a);
+      }
+
       this.field_241104_N_ = p_i241885_12_;
       this.field_241103_E_ = p_i241885_4_;
-      this.field_241102_C_ = new ServerChunkProvider(this, p_i241885_3_, p_i241885_1_.func_195563_aC(), p_i241885_1_.func_240792_aT_(), p_i241885_2_, p_i241885_8_, p_i241885_1_.func_184103_al().func_72395_o(), p_i241885_1_.func_230540_aS_(), p_i241885_7_, () -> {
+      this.field_241102_C_ = new ServerChunkProvider(this, p_i241885_3_, p_i241885_1_.func_195563_aC(), p_i241885_1_.func_240792_aT_(), p_i241885_2_, p_i241885_8_, this.spigotConfig.viewDistance, p_i241885_1_.func_230540_aS_(), p_i241885_7_, () -> {
          return p_i241885_1_.func_241755_D_().func_217481_x();
       });
       this.field_85177_Q = new Teleporter(this);
@@ -200,7 +_,134 @@
       } else {
          this.field_241105_O_ = null;
       }
-
+      this.initCapabilities();
+
+      this.asyncChunkTaskManager = new com.destroystokyo.paper.io.chunk.ChunkTaskManager(this); // Paper
+   }
+
+   // Paper start - helper function for configurable spawn radius
+   public void addTicketsForSpawn(int radiusInBlocks, BlockPos spawn) {
+      // In order to respect vanilla behavior, which is ensuring everything but the spawn border can tick, we add tickets
+      // with level 31 for the non-border spawn chunks
+      ServerChunkProvider chunkproviderserver = this.func_72863_F();
+      int tickRadius = radiusInBlocks - 16;
+
+      // add ticking chunks
+      for (int x = -tickRadius; x <= tickRadius; x += 16) {
+         for (int z = -tickRadius; z <= tickRadius; z += 16) {
+            // radius of 2 will have the current chunk be level 31
+            chunkproviderserver.func_217228_a(TicketType.field_219488_a, new ChunkPos(spawn.func_177982_a(x, 0, z)), 2, Unit.INSTANCE);
+         }
+      }
+
+      // add border chunks
+
+      // add border along x axis (including corner chunks)
+      for (int x = -radiusInBlocks; x <= radiusInBlocks; x += 16) {
+         // top
+         chunkproviderserver.func_217228_a(TicketType.field_219488_a, new ChunkPos(spawn.func_177982_a(x, 0, radiusInBlocks)), 1, Unit.INSTANCE); // level 32
+         // bottom
+         chunkproviderserver.func_217228_a(TicketType.field_219488_a, new ChunkPos(spawn.func_177982_a(x, 0, -radiusInBlocks)), 1, Unit.INSTANCE); // level 32
+      }
+
+      // add border along z axis (excluding corner chunks)
+      for (int z = -radiusInBlocks + 16; z < radiusInBlocks; z += 16) {
+         // right
+         chunkproviderserver.func_217228_a(TicketType.field_219488_a, new ChunkPos(spawn.func_177982_a(radiusInBlocks, 0, z)), 1, Unit.INSTANCE); // level 32
+         // left
+         chunkproviderserver.func_217228_a(TicketType.field_219488_a, new ChunkPos(spawn.func_177982_a(-radiusInBlocks, 0, z)), 1, Unit.INSTANCE); // level 32
+      }
+
+      MCUtil.getSpiralOutChunks(spawn, radiusInBlocks >> 4).forEach(pair -> {
+         func_72863_F().getChunkAtAsynchronously(pair.field_77276_a, pair.field_77275_b, true, false).exceptionally((ex) -> {
+            ex.printStackTrace();
+            return null;
+         });
+      });
+   }
+
+   public void removeTicketsForSpawn(int radiusInBlocks, BlockPos spawn) {
+      // In order to respect vanilla behavior, which is ensuring everything but the spawn border can tick, we added tickets
+      // with level 31 for the non-border spawn chunks
+      ServerChunkProvider chunkproviderserver = this.func_72863_F();
+      int tickRadius = radiusInBlocks - 16;
+
+      // remove ticking chunks
+      for (int x = -tickRadius; x <= tickRadius; x += 16) {
+         for (int z = -tickRadius; z <= tickRadius; z += 16) {
+            // radius of 2 will have the current chunk be level 31
+            chunkproviderserver.releaseTickingTicket(TicketType.field_219488_a, new ChunkPos(spawn.func_177982_a(x, 0, z)), 2, Unit.INSTANCE);
+         }
+      }
+
+      // remove border chunks
+
+      // remove border along x axis (including corner chunks)
+      for (int x = -radiusInBlocks; x <= radiusInBlocks; x += 16) {
+         // top
+         chunkproviderserver.releaseTickingTicket(TicketType.field_219488_a, new ChunkPos(spawn.func_177982_a(x, 0, radiusInBlocks)), 1, Unit.INSTANCE); // level 32
+         // bottom
+         chunkproviderserver.releaseTickingTicket(TicketType.field_219488_a, new ChunkPos(spawn.func_177982_a(x, 0, -radiusInBlocks)), 1, Unit.INSTANCE); // level 32
+      }
+
+      // remove border along z axis (excluding corner chunks)
+      for (int z = -radiusInBlocks + 16; z < radiusInBlocks; z += 16) {
+         // right
+         chunkproviderserver.releaseTickingTicket(TicketType.field_219488_a, new ChunkPos(spawn.func_177982_a(radiusInBlocks, 0, z)), 1, Unit.INSTANCE); // level 32
+         // left
+         chunkproviderserver.releaseTickingTicket(TicketType.field_219488_a, new ChunkPos(spawn.func_177982_a(-radiusInBlocks, 0, z)), 1, Unit.INSTANCE); // level 32
+      }
+   }
+   // Paper end
+
+   public boolean loadChunk(int x, int z, boolean generate) {
+      org.spigotmc.AsyncCatcher.catchOp("chunk load"); // Spigot
+      // Paper start - Optimize this method
+      ChunkPos chunkPos = new ChunkPos(x, z);
+      IChunk immediate = func_72863_F().getChunkAtIfLoadedImmediately(x, z); // Paper
+      if (immediate != null) return true; // Paper
+
+      if (!generate) {
+
+         //IChunkAccess immediate = world.getChunkProvider().getChunkAtImmediately(x, z); // Paper
+         if (immediate == null) {
+            immediate = func_72863_F().field_217237_a.getUnloadingChunk(x, z);
+         }
+         if (immediate != null) {
+            if (!(immediate instanceof ChunkPrimerWrapper) && !(immediate instanceof Chunk)) {
+               return false; // not full status
+            }
+            func_72863_F().registerTickingTicket(TicketType.PLUGIN, chunkPos, 0, Unit.INSTANCE); // Paper
+            func_212866_a_(x, z); // make sure we're at ticket level 32 or lower
+            return true;
+         }
+
+         ChunkStatus status = func_72863_F().field_217237_a.getStatusOnDiskNoLoad(x, z); // Paper - async io - move to own method
+
+         // Paper start - async io
+         if (status == ChunkStatus.field_223226_a_) {
+            // does not exist on disk
+            return false;
+         }
+
+         if (status == null) { // at this stage we don't know what it is on disk
+            IChunk chunk = func_72863_F().func_212849_a_(x, z, ChunkStatus.field_223226_a_, true);
+            if (!(chunk instanceof ChunkPrimerWrapper) && !(chunk instanceof Chunk)) {
+               return false;
+            }
+         } else if (status != ChunkStatus.field_222617_m) {
+            return false; // not full status on disk
+         }
+         // Paper end
+
+         // fall through to load
+         // we do this so we do not re-read the chunk data on disk
+      }
+
+      func_72863_F().registerTickingTicket(TicketType.PLUGIN, chunkPos, 0, Unit.INSTANCE); // Paper
+      func_72863_F().func_212849_a_(x, z, ChunkStatus.field_222617_m, true);
+      return true;
+      // Paper end
    }
 
    public void func_241113_a_(int p_241113_1_, int p_241113_2_, boolean p_241113_3_, boolean p_241113_4_) {
@@ -296,15 +_,19 @@
          this.field_73061_a.func_184103_al().func_232642_a_(new SChangeGameStatePacket(SChangeGameStatePacket.field_241772_i_, this.field_73017_q), this.func_234923_W_());
       }
 
+      /* The function in use here has been replaced in order to only send the weather info to players in the correct dimension,
+       * rather than to all players on the server. This is what causes the client-side rain, as the
+       * client believes that it has started raining locally, rather than in another dimension.
+       */
       if (flag != this.func_72896_J()) {
          if (flag) {
-            this.field_73061_a.func_184103_al().func_148540_a(new SChangeGameStatePacket(SChangeGameStatePacket.field_241766_c_, 0.0F));
+            this.field_73061_a.func_184103_al().func_232642_a_(new SChangeGameStatePacket(SChangeGameStatePacket.field_241766_c_, 0.0F), this.func_234923_W_());
          } else {
-            this.field_73061_a.func_184103_al().func_148540_a(new SChangeGameStatePacket(SChangeGameStatePacket.field_241765_b_, 0.0F));
+            this.field_73061_a.func_184103_al().func_232642_a_(new SChangeGameStatePacket(SChangeGameStatePacket.field_241765_b_, 0.0F), this.func_234923_W_());
          }
 
-         this.field_73061_a.func_184103_al().func_148540_a(new SChangeGameStatePacket(SChangeGameStatePacket.field_241771_h_, this.field_73004_o));
-         this.field_73061_a.func_184103_al().func_148540_a(new SChangeGameStatePacket(SChangeGameStatePacket.field_241772_i_, this.field_73017_q));
+         this.field_73061_a.func_184103_al().func_232642_a_(new SChangeGameStatePacket(SChangeGameStatePacket.field_241771_h_, this.field_73004_o), this.func_234923_W_());
+         this.field_73061_a.func_184103_al().func_232642_a_(new SChangeGameStatePacket(SChangeGameStatePacket.field_241772_i_, this.field_73017_q), this.func_234923_W_());
       }
 
       if (this.field_73068_P && this.field_217491_A.stream().noneMatch((p_241132_0_) -> {
@@ -312,8 +_,8 @@
       })) {
          this.field_73068_P = false;
          if (this.func_82736_K().func_223586_b(GameRules.field_223607_j)) {
-            long l = this.field_72986_A.func_76073_f() + 24000L;
-            this.func_241114_a_(l - l % 24000L);
+            long l = this.func_72820_D() + 24000L;
+            this.func_241114_a_(net.minecraftforge.event.ForgeEventFactory.onSleepFinished(this, l - l % 24000L, this.func_72820_D()));
          }
 
          this.func_229856_ab_();
@@ -332,13 +_,15 @@
          this.field_205342_P.func_205365_a();
       }
 
+      this.func_73046_m().midTickLoadChunks();
       iprofiler.func_219895_b("raid");
       this.field_217494_c.func_215171_a();
       iprofiler.func_219895_b("blockEvents");
       this.func_147488_Z();
+      this.func_73046_m().midTickLoadChunks();
       this.field_211159_Q = false;
       iprofiler.func_219895_b("entities");
-      boolean flag3 = !this.field_217491_A.isEmpty() || !this.func_217469_z().isEmpty();
+      boolean flag3 = !this.field_217491_A.isEmpty() || net.minecraftforge.common.world.ForgeChunkManager.hasForcedChunks(this); //Forge: Replace vanilla's has forced chunk check with forge's that checks both the vanilla and forge added ones
       if (flag3) {
          this.func_82742_i();
       }
@@ -351,6 +_,8 @@
          this.field_217492_a = true;
          ObjectIterator<Entry<Entity>> objectiterator = this.field_217498_x.int2ObjectEntrySet().iterator();
 
+         org.spigotmc.ActivationRange.activateEntities(this); // Spigot
+
          label164:
          while(true) {
             Entity entity1;
@@ -363,6 +_,7 @@
                      this.func_217465_m(entity);
                   }
 
+                  this.func_73046_m().midTickLoadChunks();
                   this.func_217391_K();
                   break label164;
                }
@@ -395,7 +_,7 @@
             }
 
             iprofiler.func_76320_a("tick");
-            if (!entity1.field_70128_L && !(entity1 instanceof EnderDragonPartEntity)) {
+            if (!entity1.field_70128_L && !(entity1 instanceof net.minecraftforge.entity.PartEntity)) {
                this.func_217390_a(this::func_217479_a, entity1);
             }
 
@@ -404,7 +_,7 @@
             if (entity1.field_70128_L) {
                this.func_217454_n(entity1);
                objectiterator.remove();
-               this.func_217484_g(entity1);
+               this.removeEntityComplete(entity1, entity1 instanceof ServerPlayerEntity); //Forge: Keep cap data until revive. Every other entity removes directly.
             }
 
             iprofiler.func_76319_b();
@@ -418,6 +_,8 @@
       if (this.field_241107_Q_) {
          long i = this.field_72986_A.func_82573_f() + 1L;
          this.field_241103_E_.func_82572_b(i);
+         this.field_94579_S.nextTick(); // Paper
+         this.field_205342_P.nextTick(); // Paper
          this.field_241103_E_.func_215763_z().func_216331_a(this.field_73061_a, i);
          if (this.field_72986_A.func_82574_x().func_223586_b(GameRules.field_223607_j)) {
             this.func_241114_a_(this.field_72986_A.func_76073_f() + 1L);
@@ -475,6 +_,7 @@
          BlockPos blockpos2 = this.func_205770_a(Heightmap.Type.MOTION_BLOCKING, this.func_217383_a(i, 0, j, 15));
          BlockPos blockpos3 = blockpos2.func_177977_b();
          Biome biome = this.func_226691_t_(blockpos2);
+         if (this.isAreaLoaded(blockpos2, 1)) // Forge: check area to avoid loading neighbors in unloaded chunks
          if (biome.func_201848_a(this, blockpos3)) {
             this.func_175656_a(blockpos3, Blocks.field_150432_aD.func_176223_P());
          }
@@ -591,6 +_,9 @@
       if (!(p_217479_1_ instanceof PlayerEntity) && !this.func_72863_F().func_217204_a(p_217479_1_)) {
          this.func_217464_b(p_217479_1_);
       } else {
+         final boolean isActive = org.spigotmc.ActivationRange.checkIfActive(p_217479_1_);
+
+
          p_217479_1_.func_226286_f_(p_217479_1_.func_226277_ct_(), p_217479_1_.func_226278_cu_(), p_217479_1_.func_226281_cx_());
          p_217479_1_.field_70126_B = p_217479_1_.field_70177_z;
          p_217479_1_.field_70127_C = p_217479_1_.field_70125_A;
@@ -598,10 +_,15 @@
             ++p_217479_1_.field_70173_aa;
             IProfiler iprofiler = this.func_217381_Z();
             iprofiler.func_194340_a(() -> {
-               return Registry.field_212629_r.func_177774_c(p_217479_1_.func_200600_R()).toString();
+               return p_217479_1_.func_200600_R().getRegistryName() == null ? p_217479_1_.func_200600_R().toString() : p_217479_1_.func_200600_R().getRegistryName().toString();
             });
             iprofiler.func_230035_c_("tickNonPassenger");
-            p_217479_1_.func_70071_h_();
+            if (isActive) {
+               if (p_217479_1_.canUpdate())
+                  p_217479_1_.func_70071_h_();
+            } else {
+               p_217479_1_.inactiveTick();
+            }
             iprofiler.func_76319_b();
          }
 
@@ -618,6 +_,7 @@
    public void func_217459_a(Entity p_217459_1_, Entity p_217459_2_) {
       if (!p_217459_2_.field_70128_L && p_217459_2_.func_184187_bx() == p_217459_1_) {
          if (p_217459_2_ instanceof PlayerEntity || this.func_72863_F().func_217204_a(p_217459_2_)) {
+            final boolean isActive = org.spigotmc.ActivationRange.checkIfActive(p_217459_2_);
             p_217459_2_.func_226286_f_(p_217459_2_.func_226277_ct_(), p_217459_2_.func_226278_cu_(), p_217459_2_.func_226281_cx_());
             p_217459_2_.field_70126_B = p_217459_2_.field_70177_z;
             p_217459_2_.field_70127_C = p_217459_2_.field_70125_A;
@@ -628,7 +_,13 @@
                   return Registry.field_212629_r.func_177774_c(p_217459_2_.func_200600_R()).toString();
                });
                iprofiler.func_230035_c_("tickPassenger");
-               p_217459_2_.func_70098_U();
+               if (isActive) {
+                  p_217459_2_.func_70098_U();
+               } else {
+                  p_217459_2_.func_213317_d(Vector3d.field_186680_a);
+                  p_217459_2_.inactiveTick();
+                  p_217459_2_.func_184232_k(p_217459_1_);
+               }
                iprofiler.func_76319_b();
             }
 
@@ -649,9 +_,16 @@
       if (p_217464_1_.func_233578_ci_()) {
          this.func_217381_Z().func_76320_a("chunkCheck");
          int i = MathHelper.func_76128_c(p_217464_1_.func_226277_ct_() / 16.0D);
-         int j = MathHelper.func_76128_c(p_217464_1_.func_226278_cu_() / 16.0D);
+         //int j = MathHelper.floor(p_217464_1_.getY() / 16.0D);
+         int j =  Math.min(15, Math.max(0, MathHelper.func_76128_c(p_217464_1_.func_226278_cu_() / 16.0D))); // Paper - stay consistent with chunk add/remove behavior
          int k = MathHelper.func_76128_c(p_217464_1_.func_226281_cx_() / 16.0D);
          if (!p_217464_1_.field_70175_ag || p_217464_1_.field_70176_ah != i || p_217464_1_.field_70162_ai != j || p_217464_1_.field_70164_aj != k) {
+            // Paper start - remove entity if its in a chunk more correctly.
+            Chunk currentChunk = p_217464_1_.getCurrentChunk();
+            if (currentChunk != null) {
+               currentChunk.func_76622_b(p_217464_1_);
+            }
+            // Paper end
             if (p_217464_1_.field_70175_ag && this.func_217354_b(p_217464_1_.field_70176_ah, p_217464_1_.field_70164_aj)) {
                this.func_212866_a_(p_217464_1_.field_70176_ah, p_217464_1_.field_70164_aj).func_76608_a(p_217464_1_, p_217464_1_.field_70162_ai);
             }
@@ -675,6 +_,37 @@
       return !this.field_73061_a.func_175579_a(this, p_175660_2_, p_175660_1_) && this.func_175723_af().func_177746_a(p_175660_2_);
    }
 
+   // Paper start - derived from below
+   public void saveIncrementally(boolean doFull) {
+      ServerChunkProvider chunkproviderserver = this.func_72863_F();
+
+      if (doFull) {
+         //org.bukkit.Bukkit.getPluginManager().callEvent(new org.bukkit.event.world.WorldSaveEvent(getWorld()));
+         net.minecraftforge.common.MinecraftForge.EVENT_BUS.post(new net.minecraftforge.event.world.WorldEvent.Save(this));
+      }
+
+         if (doFull) {
+            this.func_73042_a();
+         }
+
+         if (!this.func_217402_u()) chunkproviderserver.saveIncrementally();
+
+
+         // Copied from save()
+         // CraftBukkit start - moved from MinecraftServer.saveChunks
+         if (doFull) { // Paper
+            ServerWorld worldserver1 = this;
+
+            //TODO:
+//            worldDataServer.a(worldserver1.getWorldBorder().t());
+//            worldDataServer.setCustomBossEvents(this.server.getBossBattleCustomData().save());
+//            convertable.a(this.server.customRegistry, this.worldDataServer, this.server.getPlayerList().save());
+         }
+         // CraftBukkit end
+
+   }
+   // Paper end
+
    public void func_217445_a(@Nullable IProgressUpdate p_217445_1_, boolean p_217445_2_, boolean p_217445_3_) {
       ServerChunkProvider serverchunkprovider = this.func_72863_F();
       if (!p_217445_3_) {
@@ -687,6 +_,7 @@
             p_217445_1_.func_200209_c(new TranslationTextComponent("menu.savingChunks"));
          }
 
+         net.minecraftforge.common.MinecraftForge.EVENT_BUS.post(new net.minecraftforge.event.world.WorldEvent.Save(this));
          serverchunkprovider.func_217210_a(p_217445_2_);
       }
    }
@@ -743,11 +_,19 @@
    }
 
    public boolean func_217376_c(Entity p_217376_1_) {
-      return this.func_72838_d(p_217376_1_);
+      return this.addFreshEntity(p_217376_1_, SpawnReason.DEFAULT);
+   }
+
+   public boolean addFreshEntity(Entity p_217376_1_, SpawnReason reason) {
+      return this.addEntity(p_217376_1_, reason);
    }
 
    public boolean func_217470_d(Entity p_217470_1_) {
-      return this.func_72838_d(p_217470_1_);
+      return this.addWithUUID(p_217470_1_, SpawnReason.DEFAULT);
+   }
+
+   public boolean addWithUUID(Entity p_217470_1_, SpawnReason reason) {
+      return this.addEntity(p_217470_1_, reason);
    }
 
    public void func_217460_e(Entity p_217460_1_) {
@@ -777,6 +_,7 @@
    }
 
    private void func_217448_f(ServerPlayerEntity p_217448_1_) {
+      if (net.minecraftforge.common.MinecraftForge.EVENT_BUS.post(new net.minecraftforge.event.entity.EntityJoinWorldEvent(p_217448_1_, this))) return;
       Entity entity = this.field_175741_N.get(p_217448_1_.func_110124_au());
       if (entity != null) {
          field_147491_a.warn("Force-added player with duplicate UUID {}", (Object)p_217448_1_.func_110124_au().toString());
@@ -794,14 +_,17 @@
       this.func_217465_m(p_217448_1_);
    }
 
-   private boolean func_72838_d(Entity p_72838_1_) {
+   private boolean addEntity(Entity p_72838_1_, SpawnReason spawnReason) {
+      org.spigotmc.AsyncCatcher.catchOp("entity add"); // Spigot
+      if (p_72838_1_.spawnReason == null) p_72838_1_.spawnReason = spawnReason; // Paper
       if (p_72838_1_.field_70128_L) {
          field_147491_a.warn("Tried to add entity {} but it was marked as removed already", (Object)EntityType.func_200718_a(p_72838_1_.func_200600_R()));
          return false;
       } else if (this.func_217478_l(p_72838_1_)) {
          return false;
       } else {
-         IChunk ichunk = this.func_217353_a(MathHelper.func_76128_c(p_72838_1_.func_226277_ct_() / 16.0D), MathHelper.func_76128_c(p_72838_1_.func_226281_cx_() / 16.0D), ChunkStatus.field_222617_m, p_72838_1_.field_98038_p);
+         if (net.minecraftforge.common.MinecraftForge.EVENT_BUS.post(new net.minecraftforge.event.entity.EntityJoinWorldEvent(p_72838_1_, this))) return false;
+         IChunk ichunk = this.func_217353_a(MathHelper.func_76128_c(p_72838_1_.func_226277_ct_() / 16.0D), MathHelper.func_76128_c(p_72838_1_.func_226281_cx_() / 16.0D), ChunkStatus.field_222617_m, true); // Paper - always load chunks for entity adds
          if (!(ichunk instanceof Chunk)) {
             return false;
          } else {
@@ -816,6 +_,7 @@
       if (this.func_217478_l(p_217440_1_)) {
          return false;
       } else {
+         if (net.minecraftforge.common.MinecraftForge.EVENT_BUS.post(new net.minecraftforge.event.entity.EntityJoinWorldEvent(p_217440_1_, this))) return false;
          this.func_217465_m(p_217440_1_);
          return true;
       }
@@ -864,27 +_,47 @@
       ClassInheritanceMultiMap<Entity>[] aclassinheritancemultimap = p_217466_1_.func_177429_s();
       int i = aclassinheritancemultimap.length;
 
+      java.util.List<Entity> toMoveChunks = new java.util.ArrayList<>(); // Paper
       for(int j = 0; j < i; ++j) {
+
          for(Entity entity : aclassinheritancemultimap[j]) {
             if (!(entity instanceof ServerPlayerEntity)) {
                if (this.field_217492_a) {
                   throw (IllegalStateException)Util.func_229757_c_(new IllegalStateException("Removing entity while ticking!"));
                }
 
+               // Paper start - move out entities that shouldn't be in this chunk before it unloads
+               if (!entity.field_70128_L && (int) Math.floor(entity.func_226277_ct_()) >> 4 != p_217466_1_.func_76632_l().field_77276_a || (int) Math.floor(entity.func_226281_cx_()) >> 4 != p_217466_1_.func_76632_l().field_77275_b) {
+                  toMoveChunks.add(entity);
+                  continue;
+               }
+               // Paper end
+
                this.field_217498_x.remove(entity.func_145782_y());
                this.func_217484_g(entity);
             }
          }
       }
 
+      // Paper start - move out entities that shouldn't be in this chunk before it unloads
+      for (Entity entity : toMoveChunks) {
+         this.func_217464_b(entity);
+      }
+      // Paper end
    }
 
+   @Deprecated //Forge: Use removeEntityComplete(entity,boolean)
    public void func_217484_g(Entity p_217484_1_) {
-      if (p_217484_1_ instanceof EnderDragonEntity) {
-         for(EnderDragonPartEntity enderdragonpartentity : ((EnderDragonEntity)p_217484_1_).func_213404_dT()) {
-            enderdragonpartentity.func_70106_y();
+      removeEntityComplete(p_217484_1_, false);
+   }
+   public void removeEntityComplete(Entity p_217484_1_, boolean keepData) {
+      org.spigotmc.AsyncCatcher.catchOp("entity unregister"); // Spigot
+      if (p_217484_1_.isMultipartEntity()) {
+         for(net.minecraftforge.entity.PartEntity<?> enderdragonpartentity : p_217484_1_.getParts()) {
+            enderdragonpartentity.remove(keepData);
          }
       }
+      p_217484_1_.remove(keepData);
 
       this.field_175741_N.remove(p_217484_1_.func_110124_au());
       this.func_72863_F().func_217226_b(p_217484_1_);
@@ -898,6 +_,8 @@
          this.field_217495_I.remove(((MobEntity)p_217484_1_).func_70661_as());
       }
 
+      p_217484_1_.onRemovedFromWorld();
+      net.minecraftforge.common.MinecraftForge.EVENT_BUS.post(new net.minecraftforge.event.entity.EntityLeaveWorldEvent(p_217484_1_, this));
    }
 
    private void func_217465_m(Entity p_217465_1_) {
@@ -905,8 +_,8 @@
          this.field_217499_z.add(p_217465_1_);
       } else {
          this.field_217498_x.put(p_217465_1_.func_145782_y(), p_217465_1_);
-         if (p_217465_1_ instanceof EnderDragonEntity) {
-            for(EnderDragonPartEntity enderdragonpartentity : ((EnderDragonEntity)p_217465_1_).func_213404_dT()) {
+         if (p_217465_1_.isMultipartEntity()) {
+            for(net.minecraftforge.entity.PartEntity<?> enderdragonpartentity : p_217465_1_.getParts()) {
                this.field_217498_x.put(enderdragonpartentity.func_145782_y(), enderdragonpartentity);
             }
          }
@@ -918,15 +_,19 @@
          }
       }
 
+      p_217465_1_.onAddedToWorld();
    }
 
    public void func_217467_h(Entity p_217467_1_) {
+      removeEntity(p_217467_1_, false);
+   }
+   public void removeEntity(Entity p_217467_1_, boolean keepData) {
       if (this.field_217492_a) {
          throw (IllegalStateException)Util.func_229757_c_(new IllegalStateException("Removing entity while ticking!"));
       } else {
          this.func_217454_n(p_217467_1_);
          this.field_217498_x.remove(p_217467_1_.func_145782_y());
-         this.func_217484_g(p_217467_1_);
+         this.removeEntityComplete(p_217467_1_, keepData);
       }
    }
 
@@ -939,8 +_,11 @@
    }
 
    public void func_217434_e(ServerPlayerEntity p_217434_1_) {
-      p_217434_1_.func_70106_y();
-      this.func_217467_h(p_217434_1_);
+      removePlayer(p_217434_1_, false);
+   }
+   public void removePlayer(ServerPlayerEntity p_217434_1_, boolean keepData) {
+      p_217434_1_.remove(keepData);
+      this.removeEntity(p_217434_1_, keepData);
       this.func_72854_c();
    }
 
@@ -959,10 +_,20 @@
    }
 
    public void func_184148_a(@Nullable PlayerEntity p_184148_1_, double p_184148_2_, double p_184148_4_, double p_184148_6_, SoundEvent p_184148_8_, SoundCategory p_184148_9_, float p_184148_10_, float p_184148_11_) {
+      net.minecraftforge.event.entity.PlaySoundAtEntityEvent event = net.minecraftforge.event.ForgeEventFactory.onPlaySoundAtEntity(p_184148_1_, p_184148_8_, p_184148_9_, p_184148_10_, p_184148_11_);
+      if (event.isCanceled() || event.getSound() == null) return;
+      p_184148_8_ = event.getSound();
+      p_184148_9_ = event.getCategory();
+      p_184148_10_ = event.getVolume();
       this.field_73061_a.func_184103_al().func_148543_a(p_184148_1_, p_184148_2_, p_184148_4_, p_184148_6_, p_184148_10_ > 1.0F ? (double)(16.0F * p_184148_10_) : 16.0D, this.func_234923_W_(), new SPlaySoundEffectPacket(p_184148_8_, p_184148_9_, p_184148_2_, p_184148_4_, p_184148_6_, p_184148_10_, p_184148_11_));
    }
 
    public void func_217384_a(@Nullable PlayerEntity p_217384_1_, Entity p_217384_2_, SoundEvent p_217384_3_, SoundCategory p_217384_4_, float p_217384_5_, float p_217384_6_) {
+      net.minecraftforge.event.entity.PlaySoundAtEntityEvent event = net.minecraftforge.event.ForgeEventFactory.onPlaySoundAtEntity(p_217384_1_, p_217384_3_, p_217384_4_, p_217384_5_, p_217384_6_);
+      if (event.isCanceled() || event.getSound() == null) return;
+      p_217384_3_ = event.getSound();
+      p_217384_4_ = event.getCategory();
+      p_217384_5_ = event.getVolume();
       this.field_73061_a.func_184103_al().func_148543_a(p_217384_1_, p_217384_2_.func_226277_ct_(), p_217384_2_.func_226278_cu_(), p_217384_2_.func_226281_cx_(), p_217384_5_ > 1.0F ? (double)(16.0F * p_217384_5_) : 16.0D, this.func_234923_W_(), new SSpawnMovingSoundEffectPacket(p_217384_3_, p_217384_4_, p_217384_2_, p_217384_5_, p_217384_6_));
    }
 
@@ -998,6 +_,7 @@
 
    public Explosion func_230546_a_(@Nullable Entity p_230546_1_, @Nullable DamageSource p_230546_2_, @Nullable ExplosionContext p_230546_3_, double p_230546_4_, double p_230546_6_, double p_230546_8_, float p_230546_10_, boolean p_230546_11_, Explosion.Mode p_230546_12_) {
       Explosion explosion = new Explosion(this, p_230546_1_, p_230546_2_, p_230546_3_, p_230546_4_, p_230546_6_, p_230546_8_, p_230546_10_, p_230546_11_, p_230546_12_);
+      if (net.minecraftforge.event.ForgeEventFactory.onExplosionStart(this, explosion)) return explosion;
       explosion.func_77278_a();
       explosion.func_77279_a(false);
       if (p_230546_12_ == Explosion.Mode.NONE) {
@@ -1144,10 +_,17 @@
    }
 
    public void func_241124_a__(BlockPos p_241124_1_, float p_241124_2_) {
-      ChunkPos chunkpos = new ChunkPos(new BlockPos(this.field_72986_A.func_76079_c(), 0, this.field_72986_A.func_76074_e()));
+      // Paper - configurable spawn radius
+      BlockPos prevSpawn = this.func_241135_u_();
+      //ChunkPos chunkpos = new ChunkPos(new BlockPos(this.levelData.getXSpawn(), 0, this.levelData.getZSpawn()));
       this.field_72986_A.func_176143_a(p_241124_1_, p_241124_2_);
-      this.func_72863_F().func_217222_b(TicketType.field_219488_a, chunkpos, 11, Unit.INSTANCE);
-      this.func_72863_F().func_217228_a(TicketType.field_219488_a, new ChunkPos(p_241124_1_), 11, Unit.INSTANCE);
+      if (this.paperConfig.keepSpawnInMemory) {
+         // if this keepSpawnInMemory is false a plugin has already removed our tickets, do not re-add
+         this.removeTicketsForSpawn(this.paperConfig.keepLoadedRange, prevSpawn);
+         this.addTicketsForSpawn(this.paperConfig.keepLoadedRange, p_241124_1_);
+      }
+//      this.getChunkSource().removeRegionTicket(TicketType.START, chunkpos, 11, Unit.INSTANCE);
+//      this.getChunkSource().addRegionTicket(TicketType.START, new ChunkPos(p_241124_1_), 11, Unit.INSTANCE);
       this.func_73046_m().func_184103_al().func_148540_a(new SWorldSpawnChangedPacket(p_241124_1_, p_241124_2_));
    }
 
@@ -1368,7 +_,7 @@
       return this.func_241112_a_().func_235011_a_(p_241827_1_, p_241827_2_);
    }
 
-   public ServerWorld func_201672_e() {
+   public ServerWorld getLevel() {
       return this;
    }
 
@@ -1410,4 +_,15 @@
          p_241121_0_.func_175656_a(p_241122_1_, Blocks.field_150343_Z.func_176223_P());
       });
    }
+
+   protected void initCapabilities() {
+      this.gatherCapabilities();
+      capabilityData = this.func_217481_x().func_215752_a(() -> new net.minecraftforge.common.util.WorldCapabilityData(getCapabilities()), net.minecraftforge.common.util.WorldCapabilityData.ID);
+      capabilityData.setCapabilities(getCapabilities());
+   }
+
+   public java.util.stream.Stream<Entity> getEntities() {
+       return field_217498_x.values().stream();
+   }
+
 }
