--- a/net/minecraft/world/server/ChunkManager.java
+++ b/net/minecraft/world/server/ChunkManager.java
@@ -1,5 +_,6 @@
 package net.minecraft.world.server;
 
+import com.destroystokyo.paper.util.MCUtil;
 import com.google.common.collect.ImmutableList;
 import com.google.common.collect.Iterables;
 import com.google.common.collect.Lists;
@@ -19,28 +_,23 @@
 import java.io.File;
 import java.io.IOException;
 import java.io.Writer;
-import java.util.Collection;
-import java.util.List;
-import java.util.Objects;
-import java.util.Optional;
-import java.util.Queue;
-import java.util.Set;
+import java.util.*;
 import java.util.concurrent.CancellationException;
 import java.util.concurrent.CompletableFuture;
 import java.util.concurrent.CompletionException;
 import java.util.concurrent.Executor;
 import java.util.concurrent.atomic.AtomicInteger;
-import java.util.function.BooleanSupplier;
-import java.util.function.IntFunction;
-import java.util.function.IntSupplier;
-import java.util.function.Supplier;
+import java.util.function.*;
 import java.util.stream.Collectors;
 import java.util.stream.Stream;
 import javax.annotation.Nullable;
+
+import it.unimi.dsi.fastutil.objects.ObjectRBTreeSet;
 import net.minecraft.crash.CrashReport;
 import net.minecraft.crash.CrashReportCategory;
 import net.minecraft.crash.ReportedException;
 import net.minecraft.entity.Entity;
+import net.minecraft.entity.EntityClassification;
 import net.minecraft.entity.EntityType;
 import net.minecraft.entity.MobEntity;
 import net.minecraft.entity.boss.dragon.EnderDragonPartEntity;
@@ -49,12 +_,11 @@
 import net.minecraft.nbt.CompoundNBT;
 import net.minecraft.network.DebugPacketSender;
 import net.minecraft.network.IPacket;
-import net.minecraft.network.play.server.SChunkDataPacket;
-import net.minecraft.network.play.server.SMountEntityPacket;
-import net.minecraft.network.play.server.SSetPassengersPacket;
-import net.minecraft.network.play.server.SUpdateChunkPositionPacket;
-import net.minecraft.network.play.server.SUpdateLightPacket;
+import net.minecraft.network.play.ServerPlayNetHandler;
+import net.minecraft.network.play.client.CMoveVehiclePacket;
+import net.minecraft.network.play.server.*;
 import net.minecraft.profiler.IProfiler;
+import net.minecraft.server.MinecraftServer;
 import net.minecraft.util.CSVWriter;
 import net.minecraft.util.ClassInheritanceMultiMap;
 import net.minecraft.util.Util;
@@ -81,6 +_,7 @@
 import net.minecraft.world.chunk.listener.IChunkStatusListener;
 import net.minecraft.world.chunk.storage.ChunkLoader;
 import net.minecraft.world.chunk.storage.ChunkSerializer;
+import net.minecraft.world.chunk.storage.RegionFile;
 import net.minecraft.world.gen.ChunkGenerator;
 import net.minecraft.world.gen.feature.structure.StructureStart;
 import net.minecraft.world.gen.feature.template.TemplateManager;
@@ -91,36 +_,227 @@
 import org.apache.commons.lang3.mutable.MutableBoolean;
 import org.apache.logging.log4j.LogManager;
 import org.apache.logging.log4j.Logger;
+import org.spigotmc.AsyncCatcher;
 
 public class ChunkManager extends ChunkLoader implements ChunkHolder.IPlayerProvider {
    private static final Logger field_219250_d = LogManager.getLogger();
    public static final int field_219249_a = 33 + ChunkStatus.func_222600_b();
-   private final Long2ObjectLinkedOpenHashMap<ChunkHolder> field_219251_e = new Long2ObjectLinkedOpenHashMap<>();
-   private volatile Long2ObjectLinkedOpenHashMap<ChunkHolder> field_219252_f = this.field_219251_e.clone();
-   private final Long2ObjectLinkedOpenHashMap<ChunkHolder> field_219253_g = new Long2ObjectLinkedOpenHashMap<>();
+//   private final Long2ObjectLinkedOpenHashMap<ChunkHolder> updatingChunkMap = new Long2ObjectLinkedOpenHashMap<>();
+//   private volatile Long2ObjectLinkedOpenHashMap<ChunkHolder> visibleChunkMap = this.updatingChunkMap.clone();
+//   private final Long2ObjectLinkedOpenHashMap<ChunkHolder> pendingUnloads = new Long2ObjectLinkedOpenHashMap<>();
+// Paper start - faster copying
+public final Long2ObjectLinkedOpenHashMap<ChunkHolder> updatingChunks = new com.destroystokyo.paper.util.map.Long2ObjectLinkedOpenHashMapFastCopy<>(); // Paper - faster copying
+   public final Long2ObjectLinkedOpenHashMap<ChunkHolder> visibleChunks = new ProtectedVisibleChunksMap(); // Paper - faster copying
+
+   private class ProtectedVisibleChunksMap extends com.destroystokyo.paper.util.map.Long2ObjectLinkedOpenHashMapFastCopy<ChunkHolder> {
+      @Override
+      public ChunkHolder put(long k, ChunkHolder playerChunk) {
+         throw new UnsupportedOperationException("Updating visible Chunks");
+      }
+
+      @Override
+      public ChunkHolder remove(long k) {
+         throw new UnsupportedOperationException("Removing visible Chunks");
+      }
+
+      @Override
+      public ChunkHolder get(long k) {
+         return ChunkManager.this.func_219219_b(k);
+      }
+
+      public ChunkHolder safeGet(long k) {
+         return super.get(k);
+      }
+   }
+   public final com.destroystokyo.paper.util.map.Long2ObjectLinkedOpenHashMapFastCopy<ChunkHolder> pendingVisibleChunks = new com.destroystokyo.paper.util.map.Long2ObjectLinkedOpenHashMapFastCopy<ChunkHolder>(); // Paper - this is used if the visible chunks is updated while iterating only
+   public transient com.destroystokyo.paper.util.map.Long2ObjectLinkedOpenHashMapFastCopy<ChunkHolder> visibleChunksClone; // Paper - used for async access of visible chunks, clone and cache only when needed
+   private final Long2ObjectLinkedOpenHashMap<ChunkHolder> pendingUnload = new Long2ObjectLinkedOpenHashMap();
+   // Paper end
+
    private final LongSet field_219254_h = new LongOpenHashSet();
-   private final ServerWorld field_219255_i;
+   public final ServerWorld field_219255_i;
    private final ServerWorldLightManager field_219256_j;
    private final ThreadTaskExecutor<Runnable> field_219257_k;
+   public final java.util.concurrent.Executor mainInvokingExecutor; // Paper
    private final ChunkGenerator field_219258_l;
-   private final Supplier<DimensionSavedDataManager> field_219259_m;
+   private final Supplier<DimensionSavedDataManager> field_219259_m; public final Supplier<DimensionSavedDataManager> getWorldPersistentDataSupplier() { return this.field_219259_m; } // Paper - OBFHELPER
    private final PointOfInterestManager field_219260_n;
    private final LongSet field_219261_o = new LongOpenHashSet();
    private boolean field_219262_p;
    private final ChunkTaskPriorityQueueSorter field_219263_q;
    private final ITaskExecutor<ChunkTaskPriorityQueueSorter.FunctionEntry<Runnable>> field_219264_r;
-   private final ITaskExecutor<ChunkTaskPriorityQueueSorter.FunctionEntry<Runnable>> field_219265_s;
+   public final ITaskExecutor<ChunkTaskPriorityQueueSorter.FunctionEntry<Runnable>> field_219265_s;
    private final IChunkStatusListener field_219266_t;
-   private final ChunkManager.ProxyTicketManager field_219267_u;
+   public final ChunkManager.ProxyTicketManager field_219267_u;
    private final AtomicInteger field_219268_v = new AtomicInteger();
-   private final TemplateManager field_219269_w;
+   public final TemplateManager field_219269_w;
    private final File field_219270_x;
    private final PlayerGenerationTracker field_219271_y = new PlayerGenerationTracker();
    private final Int2ObjectMap<ChunkManager.EntityTracker> field_219272_z = new Int2ObjectOpenHashMap<>();
    private final Long2ByteMap field_241087_z_ = new Long2ByteOpenHashMap();
-   private final Queue<Runnable> field_223181_A = Queues.newConcurrentLinkedQueue();
-   private int field_219247_A;
-
+   private final Queue<Runnable> field_223181_A = new com.destroystokyo.paper.utils.CachedSizeConcurrentLinkedQueue<>(); // Paper - need constant-time size()
+   private final Queue<Runnable> getUnloadQueueTasks() { return this.field_223181_A; } // Paper - OBFHELPER
+   public int field_219247_A;
+   public final com.destroystokyo.paper.util.PlayerMobDistanceMap playerMobDistanceMap; // Paper
+
+   // CraftBukkit start - recursion-safe executor for Chunk loadCallback() and unloadCallback()
+   public final CallbackExecutor callbackExecutor = new CallbackExecutor();
+   public static final class CallbackExecutor implements java.util.concurrent.Executor, Runnable {
+
+      // Paper start - replace impl with recursive safe multi entry queue
+      // it's possible to schedule multiple tasks currently, so it's vital we change this impl
+      // If we recurse into the executor again, we will append to another queue, ensuring task order consistency
+      private java.util.ArrayDeque<Runnable> queued = new java.util.ArrayDeque<>();
+
+      @Override
+      public void execute(Runnable runnable) {
+         AsyncCatcher.catchOp("Callback Executor execute");
+         if (queued == null) {
+            queued = new java.util.ArrayDeque<>();
+         }
+         queued.add(runnable);
+      }
+
+      @Override
+      public void run() {
+         AsyncCatcher.catchOp("Callback Executor run");
+         if (queued == null) {
+            return;
+         }
+         java.util.ArrayDeque<Runnable> queue = queued;
+         queued = null;
+         Runnable task;
+         while ((task = queue.pollFirst()) != null) {
+            task.run();
+         }
+      }
+      // Paper end
+   };
+   // CraftBukkit end
+
+   final CallbackExecutor chunkLoadConversionCallbackExecutor = new CallbackExecutor(); // Paper
+
+   // Paper start - optimise ChunkManager#isOutsideRange
+   private final com.destroystokyo.paper.util.misc.PooledLinkedHashSets<ServerPlayerEntity> pooledLinkedPlayerHashSets = new com.destroystokyo.paper.util.misc.PooledLinkedHashSets<>();
+   // A note about the naming used here:
+   // Previously, mojang used a "spawn range" of 8 for controlling both ticking and
+   // mob spawn range. However, spigot makes the spawn range configurable by
+   // checking if the chunk is in the tick range (8) and the spawn range
+   // obviously this means a spawn range > 8 cannot be implemented
+
+   // these maps are named after spigot's uses
+   public final com.destroystokyo.paper.util.misc.PlayerAreaMap playerMobSpawnMap; // this map is absent from updateMaps since it's controlled at the start of the chunkproviderserver tick
+   public final com.destroystokyo.paper.util.misc.PlayerAreaMap playerChunkTickRangeMap;
+   // Paper end - optimise ChunkManager#isOutsideRange
+   // Paper start - no-tick view distance
+   int noTickViewDistance;
+   public final int getRawNoTickViewDistance() {
+      return this.noTickViewDistance;
+   }
+   public final int getEffectiveNoTickViewDistance() {
+      return this.noTickViewDistance == -1 ? this.getEffectiveViewDistance() : this.noTickViewDistance;
+   }
+   public final int getLoadViewDistance() {
+      return Math.max(this.getEffectiveViewDistance(), this.getEffectiveNoTickViewDistance());
+   }
+
+   public final int getEffectiveViewDistance() {
+      // TODO this needs to be checked on update
+      // Mojang currently sets it to +1 of the configured view distance. So subtract one to get the one we really want.
+      return this.field_219247_A - 1;
+   }
+
+   public final com.destroystokyo.paper.util.misc.PlayerAreaMap playerViewDistanceBroadcastMap;
+   public final com.destroystokyo.paper.util.misc.PlayerAreaMap playerViewDistanceTickMap;
+   public final com.destroystokyo.paper.util.misc.PlayerAreaMap playerViewDistanceNoTickMap;
+   // Paper end - no-tick view distance
+
+   static final org.spigotmc.TrackingRange.TrackingRangeType[] TRACKING_RANGE_TYPES = org.spigotmc.TrackingRange.TrackingRangeType.values();
+   public final com.destroystokyo.paper.util.misc.PlayerAreaMap[] playerEntityTrackerTrackMaps;
+   final int[] entityTrackerTrackRanges;
+
+   public int getMobCountNear(ServerPlayerEntity entityPlayer, EntityClassification enumCreatureType) {
+      return entityPlayer.mobCounts[enumCreatureType.ordinal()];
+   }
+
+   void addPlayerToDistanceMaps(ServerPlayerEntity player) {
+      int chunkX = MCUtil.getChunkCoordinate(player.func_226277_ct_());
+      int chunkZ = MCUtil.getChunkCoordinate(player.func_226281_cx_());
+      // Note: players need to be explicitly added to distance maps before they can be updated
+      // Paper start - use distance map to optimise entity tracker
+      for (int i = 0, len = TRACKING_RANGE_TYPES.length; i < len; ++i) {
+         com.destroystokyo.paper.util.misc.PlayerAreaMap trackMap = this.playerEntityTrackerTrackMaps[i];
+         int trackRange = this.entityTrackerTrackRanges[i];
+
+         trackMap.add(player, chunkX, chunkZ, Math.min(trackRange, this.getEffectiveViewDistance()));
+      }
+      // Paper end - use distance map to optimise entity tracker
+      // Paper start - optimise PlayerChunkMap#isOutsideRange
+      this.playerChunkTickRangeMap.add(player, chunkX, chunkZ, TicketManager.MOB_SPAWN_RANGE);
+      // Paper end - optimise PlayerChunkMap#isOutsideRange
+      // Paper start - no-tick view distance
+      int effectiveTickViewDistance = this.getEffectiveViewDistance();
+      int effectiveNoTickViewDistance = Math.max(this.getEffectiveNoTickViewDistance(), effectiveTickViewDistance);
+
+      if (!this.func_219187_b(player)) {
+         this.playerViewDistanceTickMap.add(player, chunkX, chunkZ, effectiveTickViewDistance);
+         this.playerViewDistanceNoTickMap.add(player, chunkX, chunkZ, effectiveNoTickViewDistance + 2); // clients need chunk 1 neighbour, and we need another 1 for sending those extra neighbours (as we require neighbours to send)
+      }
+
+      player.needsChunkCenterUpdate = true;
+      this.playerViewDistanceBroadcastMap.add(player, chunkX, chunkZ, effectiveNoTickViewDistance + 1); // clients need an extra neighbour to render the full view distance configured
+      player.needsChunkCenterUpdate = false;
+      // Paper end - no-tick view distance
+   }
+
+   void removePlayerFromDistanceMaps(ServerPlayerEntity player) {
+      // Paper start - use distance map to optimise tracker
+      for (int i = 0, len = TRACKING_RANGE_TYPES.length; i < len; ++i) {
+         this.playerEntityTrackerTrackMaps[i].remove(player);
+      }
+      // Paper end - use distance map to optimise tracker
+      // Paper start - optimise PlayerChunkMap#isOutsideRange
+      this.playerMobSpawnMap.remove(player);
+      this.playerChunkTickRangeMap.remove(player);
+      // Paper end - optimise PlayerChunkMap#isOutsideRange
+      // Paper start - no-tick view distance
+      this.playerViewDistanceBroadcastMap.remove(player);
+      this.playerViewDistanceTickMap.remove(player);
+      this.playerViewDistanceNoTickMap.remove(player);
+      // Paper end - no-tick view distance
+   }
+
+   void updateMaps(ServerPlayerEntity player) {
+      int chunkX = MCUtil.getChunkCoordinate(player.func_226277_ct_());
+      int chunkZ = MCUtil.getChunkCoordinate(player.func_226281_cx_());
+      // Note: players need to be explicitly added to distance maps before they can be updated
+      // Paper start - use distance map to optimise entity tracker
+      for (int i = 0, len = TRACKING_RANGE_TYPES.length; i < len; ++i) {
+         com.destroystokyo.paper.util.misc.PlayerAreaMap trackMap = this.playerEntityTrackerTrackMaps[i];
+         int trackRange = this.entityTrackerTrackRanges[i];
+
+         trackMap.update(player, chunkX, chunkZ, Math.min(trackRange, this.getEffectiveViewDistance()));
+      }
+      // Paper end - use distance map to optimise entity tracker
+      // Paper start - optimise PlayerChunkMap#isOutsideRange
+      this.playerChunkTickRangeMap.update(player, chunkX, chunkZ, TicketManager.MOB_SPAWN_RANGE);
+      // Paper end - optimise PlayerChunkMap#isOutsideRange
+      // Paper start - no-tick view distance
+      int effectiveTickViewDistance = this.getEffectiveViewDistance();
+      int effectiveNoTickViewDistance = Math.max(this.getEffectiveNoTickViewDistance(), effectiveTickViewDistance);
+
+      if (!this.func_219187_b(player)) {
+         this.playerViewDistanceTickMap.update(player, chunkX, chunkZ, effectiveTickViewDistance);
+         this.playerViewDistanceNoTickMap.update(player, chunkX, chunkZ, effectiveNoTickViewDistance + 2); // clients need chunk 1 neighbour, and we need another 1 for sending those extra neighbours (as we require neighbours to send)
+      }
+
+      player.needsChunkCenterUpdate = true;
+      this.playerViewDistanceBroadcastMap.update(player, chunkX, chunkZ, effectiveNoTickViewDistance + 1); // clients need an extra neighbour to render the full view distance configured
+      player.needsChunkCenterUpdate = false;
+      // Paper end - no-tick view distance
+   }
+   // Paper end
+   private final java.util.concurrent.ExecutorService lightThread;
    public ChunkManager(ServerWorld p_i232602_1_, SaveFormat.LevelSave p_i232602_2_, DataFixer p_i232602_3_, TemplateManager p_i232602_4_, Executor p_i232602_5_, ThreadTaskExecutor<Runnable> p_i232602_6_, IChunkLightProvider p_i232602_7_, ChunkGenerator p_i232602_8_, IChunkStatusListener p_i232602_9_, Supplier<DimensionSavedDataManager> p_i232602_10_, int p_i232602_11_, boolean p_i232602_12_) {
       super(new File(p_i232602_2_.func_237291_a_(p_i232602_1_.func_234923_W_()), "region"), p_i232602_3_, p_i232602_12_);
       this.field_219269_w = p_i232602_4_;
@@ -128,18 +_,190 @@
       this.field_219255_i = p_i232602_1_;
       this.field_219258_l = p_i232602_8_;
       this.field_219257_k = p_i232602_6_;
+      // Paper start
+      this.mainInvokingExecutor = (run) -> {
+         if (MCUtil.isMainThread()) {
+            run.run();
+         } else {
+            p_i232602_6_.execute(run);
+         }
+      };
+      // Paper end
       DelegatedTaskExecutor<Runnable> delegatedtaskexecutor = DelegatedTaskExecutor.func_213144_a(p_i232602_5_, "worldgen");
       ITaskExecutor<Runnable> itaskexecutor = ITaskExecutor.func_213140_a("main", p_i232602_6_::func_212871_a_);
       this.field_219266_t = p_i232602_9_;
-      DelegatedTaskExecutor<Runnable> delegatedtaskexecutor1 = DelegatedTaskExecutor.func_213144_a(p_i232602_5_, "light");
-      this.field_219263_q = new ChunkTaskPriorityQueueSorter(ImmutableList.of(delegatedtaskexecutor, itaskexecutor, delegatedtaskexecutor1), p_i232602_5_, Integer.MAX_VALUE);
+      // Paper start - use light thread
+     DelegatedTaskExecutor<Runnable> threadedmailbox1 = DelegatedTaskExecutor.func_213144_a(lightThread = java.util.concurrent.Executors.newSingleThreadExecutor(r -> {
+         Thread thread = new Thread(r);
+         thread.setName(field_219255_i.func_234923_W_().func_240901_a_() + " - Light");
+         thread.setDaemon(true);
+         thread.setPriority(Thread.NORM_PRIORITY+1);
+         return thread;
+      }), "light");
+      // Paper end
+      //DelegatedTaskExecutor<Runnable> delegatedtaskexecutor1 = DelegatedTaskExecutor.create(p_i232602_5_, "light");
+      this.field_219263_q = new ChunkTaskPriorityQueueSorter(ImmutableList.of(delegatedtaskexecutor, itaskexecutor, threadedmailbox1), p_i232602_5_, Integer.MAX_VALUE);
       this.field_219264_r = this.field_219263_q.func_219087_a(delegatedtaskexecutor, false);
       this.field_219265_s = this.field_219263_q.func_219087_a(itaskexecutor, false);
-      this.field_219256_j = new ServerWorldLightManager(p_i232602_7_, this, this.field_219255_i.func_230315_m_().func_218272_d(), delegatedtaskexecutor1, this.field_219263_q.func_219087_a(delegatedtaskexecutor1, false));
-      this.field_219267_u = new ChunkManager.ProxyTicketManager(p_i232602_5_, p_i232602_6_);
+      this.field_219256_j = new ServerWorldLightManager(p_i232602_7_, this, this.field_219255_i.func_230315_m_().func_218272_d(), threadedmailbox1, this.field_219263_q.func_219087_a(threadedmailbox1, false));
+      this.field_219267_u = new ChunkManager.ProxyTicketManager(p_i232602_5_, p_i232602_6_); this.field_219267_u.chunkMap = this; // Paper
       this.field_219259_m = p_i232602_10_;
       this.field_219260_n = new PointOfInterestManager(new File(this.field_219270_x, "poi"), p_i232602_3_, p_i232602_12_);
       this.func_219175_a(p_i232602_11_);
+      this.playerMobDistanceMap = this.field_219255_i.paperConfig.perPlayerMobSpawns ? new com.destroystokyo.paper.util.PlayerMobDistanceMap() : null; // Paper
+
+      // Paper start - use distance map to optimise entity tracker
+      this.playerEntityTrackerTrackMaps = new com.destroystokyo.paper.util.misc.PlayerAreaMap[TRACKING_RANGE_TYPES.length];
+      this.entityTrackerTrackRanges = new int[TRACKING_RANGE_TYPES.length];
+
+      org.spigotmc.SpigotWorldConfig spigotWorldConfig = this.field_219255_i.spigotConfig;
+
+      for (int ordinal = 0, len = TRACKING_RANGE_TYPES.length; ordinal < len; ++ordinal) {
+         org.spigotmc.TrackingRange.TrackingRangeType trackingRangeType = TRACKING_RANGE_TYPES[ordinal];
+         int configuredSpigotValue;
+         switch (trackingRangeType) {
+            case PLAYER:
+               configuredSpigotValue = spigotWorldConfig.playerTrackingRange;
+               break;
+            case ANIMAL:
+               configuredSpigotValue = spigotWorldConfig.animalTrackingRange;
+               break;
+            case MONSTER:
+               configuredSpigotValue = spigotWorldConfig.monsterTrackingRange;
+               break;
+            case MISC:
+               configuredSpigotValue = spigotWorldConfig.miscTrackingRange;
+               break;
+            case OTHER:
+               configuredSpigotValue = spigotWorldConfig.otherTrackingRange;
+               break;
+            case ENDERDRAGON:
+               configuredSpigotValue = EntityType.field_200802_p.defaultTrackingRangeSupplier() * 16;
+               break;
+            default:
+               throw new IllegalStateException("Missing case for enum " + trackingRangeType);
+         }
+         configuredSpigotValue = MinecraftServer.getServer().func_230512_b_(configuredSpigotValue);
+
+         int trackRange = (configuredSpigotValue >>> 4) + ((configuredSpigotValue & 15) != 0 ? 1 : 0);
+         this.entityTrackerTrackRanges[ordinal] = trackRange;
+
+         this.playerEntityTrackerTrackMaps[ordinal] = new com.destroystokyo.paper.util.misc.PlayerAreaMap(this.pooledLinkedPlayerHashSets);
+      }
+      // Paper end - use distance map to optimise entity tracker
+
+      // Paper start - optimise ChunkManager#isOutsideRange
+      this.playerChunkTickRangeMap = new com.destroystokyo.paper.util.misc.PlayerAreaMap(this.pooledLinkedPlayerHashSets,
+              (ServerPlayerEntity player, int rangeX, int rangeZ, int currPosX, int currPosZ, int prevPosX, int prevPosZ,
+               com.destroystokyo.paper.util.misc.PooledLinkedHashSets.PooledObjectLinkedOpenHashSet<ServerPlayerEntity> newState) -> {
+                 ChunkHolder playerChunk = ChunkManager.this.func_219220_a(MCUtil.getCoordinateKey(rangeX, rangeZ));
+                 if (playerChunk != null) {
+                    playerChunk.playersInChunkTickRange = newState;
+                 }
+              },
+              (ServerPlayerEntity player, int rangeX, int rangeZ, int currPosX, int currPosZ, int prevPosX, int prevPosZ,
+               com.destroystokyo.paper.util.misc.PooledLinkedHashSets.PooledObjectLinkedOpenHashSet<ServerPlayerEntity> newState) -> {
+                 ChunkHolder playerChunk = ChunkManager.this.func_219220_a(MCUtil.getCoordinateKey(rangeX, rangeZ));
+                 if (playerChunk != null) {
+                    playerChunk.playersInChunkTickRange = newState;
+                 }
+              });
+      this.playerMobSpawnMap = new com.destroystokyo.paper.util.misc.PlayerAreaMap(this.pooledLinkedPlayerHashSets,
+              (ServerPlayerEntity player, int rangeX, int rangeZ, int currPosX, int currPosZ, int prevPosX, int prevPosZ,
+               com.destroystokyo.paper.util.misc.PooledLinkedHashSets.PooledObjectLinkedOpenHashSet<ServerPlayerEntity> newState) -> {
+                 ChunkHolder playerChunk = ChunkManager.this.func_219220_a(MCUtil.getCoordinateKey(rangeX, rangeZ));
+                 if (playerChunk != null) {
+                    playerChunk.playersInMobSpawnRange = newState;
+                 }
+              },
+              (ServerPlayerEntity player, int rangeX, int rangeZ, int currPosX, int currPosZ, int prevPosX, int prevPosZ,
+               com.destroystokyo.paper.util.misc.PooledLinkedHashSets.PooledObjectLinkedOpenHashSet<ServerPlayerEntity> newState) -> {
+                 ChunkHolder playerChunk = ChunkManager.this.func_219220_a(MCUtil.getCoordinateKey(rangeX, rangeZ));
+                 if (playerChunk != null) {
+                    playerChunk.playersInMobSpawnRange = newState;
+                 }
+              });
+      // Paper end - optimise ChunkManager#isOutsideRange
+      // Paper start - no-tick view distance
+      this.setNoTickViewDistance(this.field_219255_i.paperConfig.noTickViewDistance);
+      this.playerViewDistanceTickMap = new com.destroystokyo.paper.util.misc.PlayerAreaMap(this.pooledLinkedPlayerHashSets,
+              (ServerPlayerEntity player, int rangeX, int rangeZ, int currPosX, int currPosZ, int prevPosX, int prevPosZ,
+               com.destroystokyo.paper.util.misc.PooledLinkedHashSets.PooledObjectLinkedOpenHashSet<ServerPlayerEntity> newState) -> {
+                 //checkHighPriorityChunks(player);
+                 if (newState.size() != 1) {
+                    return;
+                 }
+                 Chunk chunk = ChunkManager.this.field_219255_i.func_72863_F().getChunkAtIfLoadedMainThreadNoCache(rangeX, rangeZ);
+                 if (chunk == null || !chunk.areNeighboursLoaded(2)) {
+                    return;
+                 }
+
+                 ChunkPos chunkPos = new ChunkPos(rangeX, rangeZ);
+                 ChunkManager.this.field_219255_i.func_72863_F().registerTickingTicket(TicketType.field_219490_c, chunkPos, 31, chunkPos); // entity ticking level, TODO check on update
+              },
+              (ServerPlayerEntity player, int rangeX, int rangeZ, int currPosX, int currPosZ, int prevPosX, int prevPosZ,
+               com.destroystokyo.paper.util.misc.PooledLinkedHashSets.PooledObjectLinkedOpenHashSet<ServerPlayerEntity> newState) -> {
+                 if (newState != null) {
+                    return;
+                 }
+                 ChunkPos chunkPos = new ChunkPos(rangeX, rangeZ);
+                 ChunkManager.this.field_219255_i.func_72863_F().releaseTickingTicket(TicketType.field_219490_c, chunkPos, 31, chunkPos); // entity ticking level, TODO check on update
+                 ChunkManager.this.field_219255_i.func_72863_F().clearPriorityTickets(chunkPos);
+              }, (player, prevPos, newPos) -> {
+         //player.lastHighPriorityChecked = -1; // reset and recheck
+         //checkHighPriorityChunks(player);
+      });
+      this.playerViewDistanceNoTickMap = new com.destroystokyo.paper.util.misc.PlayerAreaMap(this.pooledLinkedPlayerHashSets);
+      this.playerViewDistanceBroadcastMap = new com.destroystokyo.paper.util.misc.PlayerAreaMap(this.pooledLinkedPlayerHashSets,
+              (ServerPlayerEntity player, int rangeX, int rangeZ, int currPosX, int currPosZ, int prevPosX, int prevPosZ,
+               com.destroystokyo.paper.util.misc.PooledLinkedHashSets.PooledObjectLinkedOpenHashSet<ServerPlayerEntity> newState) -> {
+                 if (player.needsChunkCenterUpdate) {
+                    player.needsChunkCenterUpdate = false;
+                    player.field_71135_a.func_147359_a(new SUpdateChunkPositionPacket(currPosX, currPosZ));
+                 }
+                 ChunkManager.this.func_219199_a(player, new ChunkPos(rangeX, rangeZ), new IPacket[2], false, true); // unloaded, loaded
+              },
+              (ServerPlayerEntity player, int rangeX, int rangeZ, int currPosX, int currPosZ, int prevPosX, int prevPosZ,
+               com.destroystokyo.paper.util.misc.PooledLinkedHashSets.PooledObjectLinkedOpenHashSet<ServerPlayerEntity> newState) -> {
+                 ChunkManager.this.func_219199_a(player, new ChunkPos(rangeX, rangeZ), null, true, false); // unloaded, loaded
+              });
+      // Paper end - no-tick view distance
+   }
+
+   public void updatePlayerMobTypeMap(Entity entity) {
+      if (!this.field_219255_i.paperConfig.perPlayerMobSpawns) {
+         return;
+      }
+      int chunkX = (int)Math.floor(entity.func_226277_ct_()) >> 4;
+      int chunkZ = (int)Math.floor(entity.func_226281_cx_()) >> 4;
+      int index = entity.func_200600_R().func_220339_d().ordinal();
+
+      for (ServerPlayerEntity player : this.playerMobDistanceMap.getPlayersInRange(chunkX, chunkZ)) {
+         ++player.mobCounts[index];
+      }
+   }
+
+   // Paper start - Chunk Prioritization
+   public void queueHolderUpdate(ChunkHolder playerchunk) {
+      Runnable runnable = () -> {
+         if (isUnloading(playerchunk)) {
+            return; // unloaded
+         }
+         field_219267_u.field_219383_k.add(playerchunk);
+         if (!field_219267_u.pollingPendingChunkUpdates) {
+            field_219255_i.func_72863_F().func_217235_l();
+         }
+      };
+      if (MCUtil.isMainThread()) {
+         // We can't use executor here because it will not execute tasks if its currently in the middle of executing tasks...
+         runnable.run();
+      } else {
+         field_219257_k.execute(runnable);
+      }
+   }
+
+   private boolean isUnloading(ChunkHolder playerchunk) {
+      return playerchunk == null || field_223181_A.contains(playerchunk.field_219319_n.func_201841_a());
    }
 
    private static double func_219217_a(ChunkPos p_219217_0_, Entity p_219217_1_) {
@@ -176,13 +_,57 @@
    }
 
    @Nullable
-   protected ChunkHolder func_219220_a(long p_219220_1_) {
-      return this.field_219251_e.get(p_219220_1_);
-   }
+   public ChunkHolder func_219220_a(long p_219220_1_) { // Paper
+      return this.updatingChunks.get(p_219220_1_);
+   }
+
+   // Paper start - remove cloning of visible chunks unless accessed as a collection async
+   private static final boolean DEBUG_ASYNC_VISIBLE_CHUNKS = Boolean.getBoolean("paper.debug-async-visible-chunks");
+   private boolean isIterating = false;
+   private boolean hasPendingVisibleUpdate = false;
+   public void forEachVisibleChunk(java.util.function.Consumer<ChunkHolder> consumer) {
+      org.spigotmc.AsyncCatcher.catchOp("forEachVisibleChunk");
+      boolean prev = isIterating;
+      isIterating = true;
+      try {
+         for (ChunkHolder value : this.visibleChunks.values()) {
+            consumer.accept(value);
+         }
+      } finally {
+         this.isIterating = prev;
+         if (!this.isIterating && this.hasPendingVisibleUpdate) {
+            ((ProtectedVisibleChunksMap)this.visibleChunks).copyFrom(this.pendingVisibleChunks);
+            this.pendingVisibleChunks.clear();
+            this.hasPendingVisibleUpdate = false;
+         }
+      }
+   }
+   public Long2ObjectLinkedOpenHashMap<ChunkHolder> getVisibleChunks() {
+      if (Thread.currentThread() == this.field_219255_i.field_217407_c) {
+         return this.visibleChunks;
+      } else {
+         synchronized (this.visibleChunks) {
+            if (DEBUG_ASYNC_VISIBLE_CHUNKS) new Throwable("Async getVisibleChunks").printStackTrace();
+            if (this.visibleChunksClone == null) {
+               this.visibleChunksClone = this.hasPendingVisibleUpdate ? this.pendingVisibleChunks.clone() : ((ProtectedVisibleChunksMap)this.visibleChunks).clone();
+            }
+            return this.visibleChunksClone;
+         }
+      }
+   }
+   // Paper end
 
    @Nullable
-   protected ChunkHolder func_219219_b(long p_219219_1_) {
-      return this.field_219252_f.get(p_219219_1_);
+   public ChunkHolder func_219219_b(long p_219219_1_) { // Paper - protected -> public
+      // Paper start - mt safe get
+      if (Thread.currentThread() != this.field_219255_i.field_217407_c) {
+         synchronized (this.visibleChunks) {
+            return (ChunkHolder) (this.hasPendingVisibleUpdate ? this.pendingVisibleChunks.get(p_219219_1_) : ((ProtectedVisibleChunksMap)this.visibleChunks).safeGet(p_219219_1_));
+         }
+      }
+      return (ChunkHolder) (this.hasPendingVisibleUpdate ? this.pendingVisibleChunks.get(p_219219_1_) : ((ProtectedVisibleChunksMap)this.visibleChunks).safeGet(p_219219_1_));
+      // Paper end
+     //return this.visibleChunkMap.get(p_219219_1_);
    }
 
    protected IntSupplier func_219191_c(long p_219191_1_) {
@@ -219,6 +_,7 @@
       List<CompletableFuture<Either<IChunk, ChunkHolder.IChunkLoadingError>>> list = Lists.newArrayList();
       int i = p_219236_1_.field_77276_a;
       int j = p_219236_1_.field_77275_b;
+      ChunkHolder requestingNeighbor = func_219220_a(p_219236_1_.func_201841_a()); // Paper
 
       for(int k = -p_219236_2_; k <= p_219236_2_; ++k) {
          for(int l = -p_219236_2_; l <= p_219236_2_; ++l) {
@@ -236,6 +_,14 @@
 
             ChunkStatus chunkstatus = p_219236_3_.apply(i1);
             CompletableFuture<Either<IChunk, ChunkHolder.IChunkLoadingError>> completablefuture = chunkholder.func_219276_a(chunkstatus, this);
+            // Paper start
+            if (requestingNeighbor != null && requestingNeighbor != chunkholder && !completablefuture.isDone()) {
+               requestingNeighbor.onNeighborRequest(chunkholder, chunkstatus);
+               completablefuture.thenAccept(either -> {
+                  requestingNeighbor.onNeighborDone(chunkholder, chunkstatus, either.left().orElse(null));
+               });
+            }
+            // Paper end
             list.add(completablefuture);
          }
       }
@@ -271,7 +_,7 @@
          return p_219242_0_.mapLeft((p_219238_0_) -> {
             return (Chunk)p_219238_0_.get(p_219238_0_.size() / 2);
          });
-      }, this.field_219257_k);
+      }, this.mainInvokingExecutor);
    }
 
    @Nullable
@@ -281,6 +_,7 @@
       } else {
          if (p_219213_4_ != null) {
             p_219213_4_.func_219292_a(p_219213_3_);
+            p_219213_4_.updateRanges(); // Paper - optimise isOutsideOfRange
          }
 
          if (p_219213_4_ != null) {
@@ -292,14 +_,14 @@
          }
 
          if (p_219213_3_ <= field_219249_a && p_219213_4_ == null) {
-            p_219213_4_ = this.field_219253_g.remove(p_219213_1_);
+            p_219213_4_ = this.pendingUnload.remove(p_219213_1_);
             if (p_219213_4_ != null) {
                p_219213_4_.func_219292_a(p_219213_3_);
             } else {
                p_219213_4_ = new ChunkHolder(new ChunkPos(p_219213_1_), p_219213_3_, this.field_219256_j, this.field_219263_q, this);
             }
 
-            this.field_219251_e.put(p_219213_1_, p_219213_4_);
+            this.updatingChunks.put(p_219213_1_, p_219213_4_);
             this.field_219262_p = true;
          }
 
@@ -309,6 +_,7 @@
 
    public void close() throws IOException {
       try {
+         this.field_219256_j.close(); //Paper
          this.field_219263_q.close();
          this.field_219260_n.close();
       } finally {
@@ -317,9 +_,68 @@
 
    }
 
+   // Paper start - incremental autosave
+   final ObjectRBTreeSet<ChunkHolder> autoSaveQueue = new ObjectRBTreeSet<>((playerchunk1, playerchunk2) -> {
+      int timeCompare =  Long.compare(playerchunk1.lastAutoSaveTime, playerchunk2.lastAutoSaveTime);
+      if (timeCompare != 0) {
+         return timeCompare;
+      }
+
+      return Long.compare(MCUtil.getCoordinateKey(playerchunk1.field_219319_n), MCUtil.getCoordinateKey(playerchunk2.field_219319_n));
+   });
+
+   protected void saveIncrementally() {
+      int savedThisTick = 0;
+      // optimized since we search far less chunks to hit ones that need to be saved
+      List<ChunkHolder> reschedule = new java.util.ArrayList<>(this.field_219255_i.paperConfig.maxAutoSaveChunksPerTick);
+      long currentTick = this.field_219255_i.func_82737_E();
+      long maxSaveTime = currentTick - this.field_219255_i.paperConfig.autoSavePeriod;
+
+      for (Iterator<ChunkHolder> iterator = this.autoSaveQueue.iterator(); iterator.hasNext();) {
+         ChunkHolder playerchunk = iterator.next();
+         if (playerchunk.lastAutoSaveTime > maxSaveTime) {
+            break;
+         }
+
+         iterator.remove();
+
+         IChunk ichunkaccess = playerchunk.func_219302_f().getNow(null);
+         if (ichunkaccess instanceof Chunk) {
+            boolean shouldSave = ((Chunk)ichunkaccess).field_76641_n <= maxSaveTime;
+
+            if (shouldSave && this.func_219229_a(ichunkaccess)) {
+               ++savedThisTick;
+
+               if (!playerchunk.setHasBeenLoaded()) {
+                  // do not fall through to reschedule logic
+                  playerchunk.inactiveTimeStart = currentTick;
+                  if (savedThisTick >= this.field_219255_i.paperConfig.maxAutoSaveChunksPerTick) {
+                     break;
+                  }
+                  continue;
+               }
+            }
+         }
+
+         reschedule.add(playerchunk);
+
+         if (savedThisTick >= this.field_219255_i.paperConfig.maxAutoSaveChunksPerTick) {
+            break;
+         }
+      }
+
+      for (int i = 0, len = reschedule.size(); i < len; ++i) {
+         ChunkHolder playerchunk = reschedule.get(i);
+         playerchunk.lastAutoSaveTime = this.field_219255_i.func_82737_E();
+         this.autoSaveQueue.add(playerchunk);
+      }
+   }
+   // Paper end
+
    protected void func_219177_a(boolean p_219177_1_) {
+      Long2ObjectLinkedOpenHashMap<ChunkHolder> visibleChunks = this.getVisibleChunks(); // Paper remove clone of visible Chunks unless saving off main thread (watchdog kill)
       if (p_219177_1_) {
-         List<ChunkHolder> list = this.field_219252_f.values().stream().filter(ChunkHolder::func_219289_k).peek(ChunkHolder::func_219303_l).collect(Collectors.toList());
+         List<ChunkHolder> list = visibleChunks.values().stream().filter(ChunkHolder::func_219289_k).peek(ChunkHolder::func_219303_l).collect(Collectors.toList());
          MutableBoolean mutableboolean = new MutableBoolean();
 
          do {
@@ -342,10 +_,11 @@
          this.func_223155_b(() -> {
             return true;
          });
-         this.func_227079_i_();
+         //this.flushWorker();
+         this.field_219255_i.asyncChunkTaskManager.flush(); // Paper - flush to preserve behavior compat with pre-async behaviour
          field_219250_d.info("ThreadedAnvilChunkStorage ({}): All chunks are saved", (Object)this.field_219270_x.getName());
       } else {
-         this.field_219252_f.values().stream().filter(ChunkHolder::func_219289_k).forEach((p_222965_1_) -> {
+         visibleChunks.values().stream().filter(ChunkHolder::func_219289_k).forEach((p_222965_1_) -> {
             IChunk ichunk = p_222965_1_.func_219302_f().getNow((IChunk)null);
             if (ichunk instanceof ChunkPrimerWrapper || ichunk instanceof Chunk) {
                this.func_219229_a(ichunk);
@@ -357,6 +_,8 @@
 
    }
 
+   private static final double UNLOAD_QUEUE_RESIZE_FACTOR = 0.90; // Spigot // Paper - unload more
+
    protected void func_219204_a(BooleanSupplier p_219204_1_) {
       IProfiler iprofiler = this.field_219255_i.func_217381_Z();
       iprofiler.func_76320_a("poi");
@@ -371,20 +_,34 @@
 
    private void func_223155_b(BooleanSupplier p_223155_1_) {
       LongIterator longiterator = this.field_219261_o.iterator();
+      // Spigot start
+      org.spigotmc.SlackActivityAccountant activityAccountant = this.field_219255_i.func_73046_m().slackActivityAccountant;
+      activityAccountant.startActivity(0.5);
+      int targetSize = Math.min(this.field_223181_A.size() - 100,  (int) (this.field_223181_A.size() * UNLOAD_QUEUE_RESIZE_FACTOR)); // Paper - Make more aggressive
+      // Spigot end
 
-      for(int i = 0; longiterator.hasNext() && (p_223155_1_.getAsBoolean() || i < 200 || this.field_219261_o.size() > 2000); longiterator.remove()) {
+//      for(int i = 0; longiterator.hasNext() && (p_223155_1_.getAsBoolean() || i < 200 || this.toDrop.size() > 2000); longiterator.remove()) {
+//         long j = longiterator.nextLong();
+      while (longiterator.hasNext()) { // Spigot
          long j = longiterator.nextLong();
-         ChunkHolder chunkholder = this.field_219251_e.remove(j);
+         longiterator.remove(); // Spigot
+
+         ChunkHolder chunkholder = this.updatingChunks.remove(j);
          if (chunkholder != null) {
-            this.field_219253_g.put(j, chunkholder);
+            this.pendingUnload.put(j, chunkholder);
             this.field_219262_p = true;
-            ++i;
             this.func_219212_a(j, chunkholder);
+            // Spigot start
+            if (!p_223155_1_.getAsBoolean() && this.field_223181_A.size() <= targetSize && activityAccountant.activityTimeIsExhausted()) {
+               break;
+            }
+            // Spigot end
          }
       }
 
       Runnable runnable;
-      while((p_223155_1_.getAsBoolean() || this.field_223181_A.size() > 2000) && (runnable = this.field_223181_A.poll()) != null) {
+      int queueTarget = Math.min(this.getUnloadQueueTasks().size() - 100, (int) (this.getUnloadQueueTasks().size() * UNLOAD_QUEUE_RESIZE_FACTOR)); // Paper - Target this queue as well
+      while ((p_223155_1_.getAsBoolean() || this.getUnloadQueueTasks().size() > queueTarget) && (runnable = (Runnable)this.getUnloadQueueTasks().poll()) != null) { // Paper - Target this queue as well
          runnable.run();
       }
 
@@ -397,17 +_,28 @@
          if (completablefuture1 != completablefuture) {
             this.func_219212_a(p_219212_1_, p_219212_3_);
          } else {
-            if (this.field_219253_g.remove(p_219212_1_, p_219212_3_) && p_219185_5_ != null) {
+            if (this.pendingUnload.remove(p_219212_1_, p_219212_3_) && p_219185_5_ != null) {
                if (p_219185_5_ instanceof Chunk) {
                   ((Chunk)p_219185_5_).func_177417_c(false);
+                  net.minecraftforge.common.MinecraftForge.EVENT_BUS.post(new net.minecraftforge.event.world.ChunkEvent.Unload((Chunk)p_219185_5_));
                }
 
-               this.func_219229_a(p_219185_5_);
+               //this.save(p_219185_5_);
                if (this.field_219254_h.remove(p_219212_1_) && p_219185_5_ instanceof Chunk) {
                   Chunk chunk = (Chunk)p_219185_5_;
                   this.field_219255_i.func_217466_a(chunk);
                }
 
+               this.autoSaveQueue.remove(p_219212_3_); // Paper
+
+
+               try {
+                  this.asyncSave(p_219185_5_); // Paper - async chunk saving
+               } catch (Throwable ex) {
+                  field_219250_d.fatal("Failed to prepare async save, attempting synchronous save", ex);
+                  this.func_219229_a(p_219185_5_);
+               }
+
                this.field_219256_j.func_215581_a(p_219185_5_.func_76632_l());
                this.field_219256_j.func_215588_z_();
                this.field_219266_t.func_219508_a(p_219185_5_.func_76632_l(), (ChunkStatus)null);
@@ -426,10 +_,30 @@
       if (!this.field_219262_p) {
          return false;
       } else {
-         this.field_219252_f = this.field_219251_e.clone();
+         // Paper start - stop cloning visibleChunks
+         synchronized (this.visibleChunks) {
+            if (isIterating) {
+               hasPendingVisibleUpdate = true;
+               this.pendingVisibleChunks.copyFrom((com.destroystokyo.paper.util.map.Long2ObjectLinkedOpenHashMapFastCopy<ChunkHolder>)this.updatingChunks);
+            } else {
+               hasPendingVisibleUpdate = false;
+               this.pendingVisibleChunks.clear();
+               ((ProtectedVisibleChunksMap)this.visibleChunks).copyFrom((com.destroystokyo.paper.util.map.Long2ObjectLinkedOpenHashMapFastCopy<ChunkHolder>)this.updatingChunks);
+               this.visibleChunksClone = null;
+            }
+         }
+         // Paper end
+
          this.field_219262_p = false;
          return true;
       }
+//      if (!this.modified) {
+//         return false;
+//      } else {
+//         this.visibleChunkMap = this.updatingChunkMap.clone();
+//         this.modified = false;
+//         return true;
+//      }
    }
 
    public CompletableFuture<Either<IChunk, ChunkHolder.IChunkLoadingError>> func_219244_a(ChunkHolder p_219244_1_, ChunkStatus p_219244_2_) {
@@ -464,28 +_,39 @@
                   return this.func_223156_b(p_219244_1_, p_219244_2_);
                }
             }
-         }, this.field_219257_k);
+         }, this.mainInvokingExecutor).thenComposeAsync(CompletableFuture::completedFuture, this.mainInvokingExecutor); // Paper - optimize chunk status progression without jumping through thread pool - ensure main
       }
    }
 
    private CompletableFuture<Either<IChunk, ChunkHolder.IChunkLoadingError>> func_223172_f(ChunkPos p_223172_1_) {
-      return CompletableFuture.supplyAsync(() -> {
-         try {
+      // Paper start - Async chunk io
+      final java.util.function.BiFunction<ChunkSerializer.InProgressChunkHolder, Throwable, Either<IChunk, ChunkHolder.IChunkLoadingError>> syncLoadComplete = (chunkHolder, ioThrowable) -> {
+         try  { // Paper
             this.field_219255_i.func_217381_Z().func_230035_c_("chunkLoad");
-            CompoundNBT compoundnbt = this.func_219178_f(p_223172_1_);
-            if (compoundnbt != null) {
-               boolean flag = compoundnbt.func_150297_b("Level", 10) && compoundnbt.func_74775_l("Level").func_150297_b("Status", 8);
-               if (flag) {
-                  IChunk ichunk = ChunkSerializer.func_222656_a(this.field_219255_i, this.field_219269_w, this.field_219260_n, p_223172_1_, compoundnbt);
-                  ichunk.func_177432_b(this.field_219255_i.func_82737_E());
-                  this.func_241088_a_(p_223172_1_, ichunk.func_201589_g().func_202129_d());
-                  return Either.left(ichunk);
-               }
-
-               field_219250_d.error("Chunk file at {} is missing level data, skipping", (Object)p_223172_1_);
+            // Paper start
+            if (ioThrowable != null) {
+               //com.destroystokyo.paper.util.SneakyThrow.sneaky(ioThrowable);
             }
+
+            this.func_219189_h().readColumn(p_223172_1_, chunkHolder.poiData);
+            chunkHolder.tasks.forEach(Runnable::run);
+            // Paper end
+
+            if (chunkHolder.protoChunk != null) {
+               if (true) {
+                  ChunkPrimer protochunk = chunkHolder.protoChunk;
+
+                  protochunk.func_177432_b(this.field_219255_i.func_82737_E());
+                  this.func_241088_a_(p_223172_1_, protochunk.func_201589_g().func_202129_d());
+                  return Either.left(protochunk);
+               }
+
+               field_219250_d.error("Chunk file at {} is missing level data, skipping", p_223172_1_);
+
+            } // Paper
          } catch (ReportedException reportedexception) {
             Throwable throwable = reportedexception.getCause();
+
             if (!(throwable instanceof IOException)) {
                this.func_241089_g_(p_223172_1_);
                throw reportedexception;
@@ -498,7 +_,70 @@
 
          this.func_241089_g_(p_223172_1_);
          return Either.left(new ChunkPrimer(p_223172_1_, UpgradeData.field_196994_a));
-      }, this.field_219257_k);
+         // Paper start - Async chunk io
+      };
+      CompletableFuture<Either<IChunk, ChunkHolder.IChunkLoadingError>> ret = new CompletableFuture<>();
+
+      Consumer<ChunkSerializer.InProgressChunkHolder> chunkHolderConsumer = (ChunkSerializer.InProgressChunkHolder holder) -> {
+         // Go into the chunk load queue and not server task queue so we can be popped out even faster.
+         com.destroystokyo.paper.io.chunk.ChunkTaskManager.queueChunkWaitTask(() -> {
+            try {
+               ret.complete(syncLoadComplete.apply(holder, null));
+            } catch (Exception e) {
+               ret.completeExceptionally(e);
+            }
+         });
+      };
+
+      CompletableFuture<CompoundNBT> chunkSaveFuture = this.field_219255_i.asyncChunkTaskManager.getChunkSaveFuture(p_223172_1_.field_77276_a, p_223172_1_.field_77275_b);
+      ChunkHolder playerChunk = func_219220_a(p_223172_1_.func_201841_a());
+      int chunkPriority = playerChunk != null ? playerChunk.getCurrentPriority() : 33;
+      int priority = com.destroystokyo.paper.io.PrioritizedTaskQueue.NORMAL_PRIORITY;
+
+      if (chunkPriority <= 10) {
+         priority = com.destroystokyo.paper.io.PrioritizedTaskQueue.HIGHEST_PRIORITY;
+      } else if (chunkPriority <= 20) {
+         priority = com.destroystokyo.paper.io.PrioritizedTaskQueue.HIGH_PRIORITY;
+      }
+      boolean isHighestPriority = priority == com.destroystokyo.paper.io.PrioritizedTaskQueue.HIGHEST_PRIORITY;
+      if (chunkSaveFuture != null) {
+         this.field_219255_i.asyncChunkTaskManager.scheduleChunkLoad(p_223172_1_.field_77276_a, p_223172_1_.field_77275_b, priority, chunkHolderConsumer, isHighestPriority, chunkSaveFuture);
+      } else {
+         this.field_219255_i.asyncChunkTaskManager.scheduleChunkLoad(p_223172_1_.field_77276_a, p_223172_1_.field_77275_b, priority, chunkHolderConsumer, isHighestPriority);
+      }
+      this.field_219255_i.asyncChunkTaskManager.raisePriority(p_223172_1_.field_77276_a, p_223172_1_.field_77275_b, priority);
+      return ret;
+      // Paper end
+//      return CompletableFuture.supplyAsync(() -> {
+//         try {
+//            this.level.getProfiler().incrementCounter("chunkLoad");
+//            CompoundNBT compoundnbt = this.readChunk(p_223172_1_);
+//            if (compoundnbt != null) {
+//               boolean flag = compoundnbt.contains("Level", 10) && compoundnbt.getCompound("Level").contains("Status", 8);
+//               if (flag) {
+//                  IChunk ichunk = ChunkSerializer.read(this.level, this.structureManager, this.poiManager, p_223172_1_, compoundnbt);
+//                  ichunk.setLastSaveTime(this.level.getGameTime());
+//                  this.markPosition(p_223172_1_, ichunk.getStatus().getChunkType());
+//                  return Either.left(ichunk);
+//               }
+//
+//               LOGGER.error("Chunk file at {} is missing level data, skipping", (Object)p_223172_1_);
+//            }
+//         } catch (ReportedException reportedexception) {
+//            Throwable throwable = reportedexception.getCause();
+//            if (!(throwable instanceof IOException)) {
+//               this.markPositionReplaceable(p_223172_1_);
+//               throw reportedexception;
+//            }
+//
+//            LOGGER.error("Couldn't load chunk {}", p_223172_1_, throwable);
+//         } catch (Exception exception) {
+//            LOGGER.error("Couldn't load chunk {}", p_223172_1_, exception);
+//         }
+//
+//         this.markPositionReplaceable(p_223172_1_);
+//         return Either.left(new ChunkPrimer(p_223172_1_, UpgradeData.EMPTY));
+//      }, this.mainThreadExecutor);
    }
 
    private void func_241089_g_(ChunkPos p_241089_1_) {
@@ -538,6 +_,12 @@
             return CompletableFuture.completedFuture(Either.right(p_219211_2_));
          });
       }, (p_219216_2_) -> {
+         // Paper start - optimize chunk status progression without jumping through thread pool
+         if (p_223156_1_.canAdvanceStatus()) {
+            this.mainInvokingExecutor.execute(p_219216_2_);
+            return;
+         }
+         // Paper end
          this.field_219264_r.func_212871_a_(ChunkTaskPriorityQueueSorter.func_219081_a(p_223156_1_, p_219216_2_));
       });
    }
@@ -575,6 +_,9 @@
                p_219200_1_.func_219294_a(new ChunkPrimerWrapper(chunk));
             }
 
+            chunk.func_177432_b(this.field_219255_i.func_82737_E() - 1); // Paper - avoid autosaving newly generated/loaded chunks
+
+
             chunk.func_217314_a(() -> {
                return ChunkHolder.func_219286_c(p_219200_1_.func_219299_i());
             });
@@ -601,12 +_,13 @@
                if (list != null) {
                   list.forEach(chunk::func_76622_b);
                }
+               net.minecraftforge.common.MinecraftForge.EVENT_BUS.post(new net.minecraftforge.event.world.ChunkEvent.Load(chunk));
             }
 
             return chunk;
          });
       }, (p_219228_2_) -> {
-         this.field_219265_s.func_212871_a_(ChunkTaskPriorityQueueSorter.func_219069_a(p_219228_2_, p_219200_1_.func_219277_h().func_201841_a(), p_219200_1_::func_219299_i));
+         this.field_219265_s.func_212871_a_(ChunkTaskPriorityQueueSorter.func_219069_a(p_219228_2_, p_219200_1_.func_219277_h().func_201841_a(), () -> 1)); // Paper - final loads are always urgent!
       });
    }
 
@@ -622,15 +_,15 @@
             return Either.left(chunk);
          });
       }, (p_219230_2_) -> {
-         this.field_219265_s.func_212871_a_(ChunkTaskPriorityQueueSorter.func_219081_a(p_219179_1_, p_219230_2_));
+         this.field_219265_s.func_212871_a_(ChunkTaskPriorityQueueSorter.func_219081_a(p_219179_1_, () -> ChunkManager.this.chunkLoadConversionCallbackExecutor.execute(p_219230_2_))); // Paper - delay running Chunk post processing until outside of the sorter to prevent a deadlock scenario when post processing causes another chunk request.
       });
       completablefuture1.thenAcceptAsync((p_219176_2_) -> {
          p_219176_2_.mapLeft((p_219196_2_) -> {
             this.field_219268_v.getAndIncrement();
-            IPacket<?>[] ipacket = new IPacket[2];
-            this.func_219097_a(chunkpos, false).forEach((p_219233_3_) -> {
-               this.func_219180_a(p_219233_3_, ipacket, p_219196_2_);
-            });
+//            IPacket<?>[] ipacket = new IPacket[2];
+//            this.getPlayers(chunkpos, false).forEach((p_219233_3_) -> {
+//               this.playerLoadedChunk(p_219233_3_, ipacket, p_219196_2_);
+//            });
             return Either.left(p_219196_2_);
          });
       }, (p_219202_2_) -> {
@@ -678,7 +_,12 @@
 
             this.field_219255_i.func_217381_Z().func_230035_c_("chunkSave");
             CompoundNBT compoundnbt = ChunkSerializer.func_222645_a(this.field_219255_i, p_219229_1_);
-            this.func_219100_a(chunkpos, compoundnbt);
+            net.minecraftforge.common.MinecraftForge.EVENT_BUS.post(new net.minecraftforge.event.world.ChunkDataEvent.Save(p_219229_1_, p_219229_1_.getWorldForge() != null ? p_219229_1_.getWorldForge() : this.field_219255_i, compoundnbt));
+            //this.write(chunkpos, compoundnbt);
+            // Paper start - async chunk io
+            com.destroystokyo.paper.io.PaperFileIOThread.Holder.INSTANCE.scheduleSave(this.field_219255_i, chunkpos.field_77276_a, chunkpos.field_77275_b,
+                    null, compoundnbt, com.destroystokyo.paper.io.PrioritizedTaskQueue.NORMAL_PRIORITY);
+            // Paper end - async chunk io
             this.func_241088_a_(chunkpos, chunkstatus.func_202129_d());
             return true;
          } catch (Exception exception) {
@@ -688,6 +_,91 @@
       }
    }
 
+   // Paper start - async chunk save for unload
+   // Note: This is very unsafe to call if the chunk is still in use.
+   // This is also modeled after PlayerChunkMap#saveChunk(IChunkAccess, boolean), with the intentional difference being
+   // serializing the chunk is left to a worker thread.
+   private void asyncSave(IChunk chunk) {
+      ChunkPos chunkPos = chunk.func_76632_l();
+      CompoundNBT poiData = this.func_219189_h().getData(chunk.func_76632_l());
+
+
+      com.destroystokyo.paper.io.PaperFileIOThread.Holder.INSTANCE.scheduleSave(this.field_219255_i, chunkPos.field_77276_a, chunkPos.field_77275_b,
+              poiData, null, com.destroystokyo.paper.io.PrioritizedTaskQueue.LOW_PRIORITY);
+
+      if (!chunk.func_201593_f()) {
+         return;
+      }
+
+      ChunkStatus chunkstatus = chunk.func_201589_g();
+
+      // Copied from PlayerChunkMap#saveChunk(IChunkAccess, boolean)
+      if (chunkstatus.func_202129_d() != ChunkStatus.Type.LEVELCHUNK) {
+            // Paper start - Optimize save by using status cache
+            try {
+               ChunkStatus statusOnDisk = this.getChunkStatusOnDisk(chunkPos);
+               if (statusOnDisk != null && statusOnDisk.func_202129_d() == ChunkStatus.Type.LEVELCHUNK) {
+                  // Paper end
+                  return;
+               }
+
+               if (chunkstatus == ChunkStatus.field_223226_a_ && chunk.func_201609_c().values().stream().noneMatch(StructureStart::func_75069_d)) {
+                  return;
+               }
+            } catch (IOException ex) {
+               ex.printStackTrace();
+               return;
+            }
+
+      }
+
+      ChunkSerializer.AsyncSaveData asyncSaveData = ChunkSerializer.getAsyncSaveData(this.field_219255_i, chunk);
+
+
+      this.field_219255_i.asyncChunkTaskManager.scheduleChunkSave(chunkPos.field_77276_a, chunkPos.field_77275_b, com.destroystokyo.paper.io.PrioritizedTaskQueue.LOW_PRIORITY,
+              asyncSaveData, chunk);
+
+      chunk.func_177432_b(this.field_219255_i.func_82737_E());
+      chunk.func_177427_f(false);
+   }
+   // Paper end
+
+   public ChunkStatus getChunkStatusOnDisk(ChunkPos chunkPos) throws IOException {
+      // Paper start - async chunk save for unload
+      IChunk unloadingChunk = this.field_219255_i.asyncChunkTaskManager.getChunkInSaveProgress(chunkPos.field_77276_a, chunkPos.field_77275_b);
+      if (unloadingChunk != null) {
+         return unloadingChunk.func_201589_g();
+      }
+      // Paper end
+      // Paper start - async io
+      CompoundNBT inProgressWrite = com.destroystokyo.paper.io.PaperFileIOThread.Holder.INSTANCE
+              .getPendingWrite(this.field_219255_i, chunkPos.field_77276_a, chunkPos.field_77275_b, false);
+
+      if (inProgressWrite != null) {
+         return ChunkSerializer.getStatus(inProgressWrite);
+      }
+      // Paper end
+      synchronized (this) { // Paper - async io
+         RegionFile regionFile = this.regionFileCache.getRegionFile(chunkPos, true);
+
+         if (regionFile == null || !regionFile.func_222667_d(chunkPos)) {
+            return null;
+         }
+
+         ChunkStatus status = regionFile.getStatusIfCached(chunkPos.field_77276_a, chunkPos.field_77275_b);
+
+         if (status != null) {
+            return status;
+         }
+         // Paper start - async io
+      }
+
+      CompoundNBT compound = this.func_219178_f(chunkPos);
+
+      return ChunkSerializer.getStatus(compound);
+      // Paper end
+   }
+
    private boolean func_241090_h_(ChunkPos p_241090_1_) {
       byte b0 = this.field_241087_z_.get(p_241090_1_.func_201841_a());
       if (b0 != 0) {
@@ -712,32 +_,62 @@
    }
 
    protected void func_219175_a(int p_219175_1_) {
-      int i = MathHelper.func_76125_a(p_219175_1_ + 1, 3, 33);
-      if (i != this.field_219247_A) {
-         int j = this.field_219247_A;
-         this.field_219247_A = i;
-         this.field_219267_u.func_219354_b(this.field_219247_A);
-
-         for(ChunkHolder chunkholder : this.field_219251_e.values()) {
-            ChunkPos chunkpos = chunkholder.func_219277_h();
-            IPacket<?>[] ipacket = new IPacket[2];
-            this.func_219097_a(chunkpos, false).forEach((p_219224_4_) -> {
-               int k = func_219215_b(chunkpos, p_219224_4_, true);
-               boolean flag = k <= j;
-               boolean flag1 = k <= this.field_219247_A;
-               this.func_219199_a(p_219224_4_, chunkpos, ipacket, flag, flag1);
-            });
+      int j = MathHelper.func_76125_a(p_219175_1_ + 1, 3, 33); // Paper - diff on change, these make the lower view distance limit 2 and the upper 32
+
+      if (j != this.field_219247_A) {
+         int k = this.field_219247_A;
+
+         this.field_219247_A = j;
+         this.setNoTickViewDistance(this.getRawNoTickViewDistance()); //Paper - no-tick view distance - propagate changes to no-tick, which does the actual chunk loading/sending
+      }
+//      int i = MathHelper.clamp(p_219175_1_ + 1, 3, 33);
+//      if (i != this.viewDistance) {
+//         int j = this.viewDistance;
+//         this.viewDistance = i;
+//         this.distanceManager.updatePlayerTickets(this.viewDistance);
+//
+//         for(ChunkHolder chunkholder : this.updatingChunkMap.values()) {
+//            ChunkPos chunkpos = chunkholder.getPos();
+//            IPacket<?>[] ipacket = new IPacket[2];
+//            this.getPlayers(chunkpos, false).forEach((p_219224_4_) -> {
+//               int k = checkerboardDistance(chunkpos, p_219224_4_, true);
+//               boolean flag = k <= j;
+//               boolean flag1 = k <= this.viewDistance;
+//               this.updateChunkTracking(p_219224_4_, chunkpos, ipacket, flag, flag1);
+//            });
+//         }
+//      }
+
+   }
+
+   // Paper start - no-tick view distance
+   public final void setNoTickViewDistance(int viewDistance) {
+      viewDistance = viewDistance == -1 ? -1 : MathHelper.func_76125_a(viewDistance, 2, 32);
+
+      this.noTickViewDistance = viewDistance;
+      int loadViewDistance = this.getLoadViewDistance();
+      this.field_219267_u.setNoTickViewDistance(loadViewDistance + 2 + 2); // add 2 to account for the change to 31 -> 33 tickets // see notes in the distance map updating for the other + 2
+
+      if (this.field_219255_i != null && this.field_219255_i.field_217491_A != null) { // this can be called from constructor, where these aren't set
+         for (ServerPlayerEntity player : this.field_219255_i.field_217491_A) {
+            ServerPlayNetHandler connection = player.field_71135_a;
+            if (connection != null) {
+               // moved in from PlayerList
+               connection.func_147359_a(new SUpdateViewDistancePacket(loadViewDistance));
+            }
+            this.updateMaps(player);
          }
       }
-
    }
+   // Paper end - no-tick view distance
 
    protected void func_219199_a(ServerPlayerEntity p_219199_1_, ChunkPos p_219199_2_, IPacket<?>[] p_219199_3_, boolean p_219199_4_, boolean p_219199_5_) {
       if (p_219199_1_.field_70170_p == this.field_219255_i) {
+         net.minecraftforge.event.ForgeEventFactory.fireChunkWatch(p_219199_4_, p_219199_5_, p_219199_1_, p_219199_2_, this.field_219255_i);
          if (p_219199_5_ && !p_219199_4_) {
             ChunkHolder chunkholder = this.func_219219_b(p_219199_2_.func_201841_a());
             if (chunkholder != null) {
-               Chunk chunk = chunkholder.func_219298_c();
+               Chunk chunk = chunkholder.getSendingChunk(); // Paper - no-tick view distance
                if (chunk != null) {
                   this.func_219180_a(p_219199_1_, p_219199_3_, chunk);
                }
@@ -754,7 +_,7 @@
    }
 
    public int func_219194_d() {
-      return this.field_219252_f.size();
+      return this.visibleChunks.size();
    }
 
    protected ChunkManager.ProxyTicketManager func_219246_e() {
@@ -762,13 +_,14 @@
    }
 
    protected Iterable<ChunkHolder> func_223491_f() {
-      return Iterables.unmodifiableIterable(this.field_219252_f.values());
+      return Iterables.unmodifiableIterable(this.getVisibleChunks().values()); // Paper
+      //return Iterables.unmodifiableIterable(this.visibleChunkMap.values());
    }
 
    void func_225406_a(Writer p_225406_1_) throws IOException {
       CSVWriter csvwriter = CSVWriter.func_225428_a().func_225423_a("x").func_225423_a("z").func_225423_a("level").func_225423_a("in_memory").func_225423_a("status").func_225423_a("full_status").func_225423_a("accessible_ready").func_225423_a("ticking_ready").func_225423_a("entity_ticking_ready").func_225423_a("ticket").func_225423_a("spawning").func_225423_a("entity_count").func_225423_a("block_entity_count").func_225422_a(p_225406_1_);
 
-      for(Entry<ChunkHolder> entry : this.field_219252_f.long2ObjectEntrySet()) {
+      for(Entry<ChunkHolder> entry : this.getVisibleChunks().long2ObjectEntrySet()) {
          ChunkPos chunkpos = new ChunkPos(entry.getLongKey());
          ChunkHolder chunkholder = entry.getValue();
          Optional<IChunk> optional = Optional.ofNullable(chunkholder.func_219287_e());
@@ -784,6 +_,35 @@
 
    }
 
+   // Paper start - Asynchronous chunk io
+   @Nullable
+   @Override
+   public CompoundNBT func_227078_e_(ChunkPos chunkcoordintpair) throws IOException {
+      if (Thread.currentThread() != com.destroystokyo.paper.io.PaperFileIOThread.Holder.INSTANCE) {
+         CompoundNBT ret = com.destroystokyo.paper.io.PaperFileIOThread.Holder.INSTANCE
+                 .loadChunkDataAsyncFuture(this.field_219255_i, chunkcoordintpair.field_77276_a, chunkcoordintpair.field_77275_b, com.destroystokyo.paper.io.IOUtil.getPriorityForCurrentThread(),
+                         false, true, true).join().chunkData;
+
+         if (ret == com.destroystokyo.paper.io.PaperFileIOThread.FAILURE_VALUE) {
+            throw new IOException("See logs for further detail");
+         }
+         return ret;
+      }
+      return super.func_227078_e_(chunkcoordintpair);
+   }
+
+   @Override
+   public void func_219100_a(ChunkPos chunkcoordintpair, CompoundNBT nbttagcompound) throws IOException {
+      if (Thread.currentThread() != com.destroystokyo.paper.io.PaperFileIOThread.Holder.INSTANCE) {
+         com.destroystokyo.paper.io.PaperFileIOThread.Holder.INSTANCE.scheduleSave(
+                 this.field_219255_i, chunkcoordintpair.field_77276_a, chunkcoordintpair.field_77275_b, null, nbttagcompound,
+                 com.destroystokyo.paper.io.IOUtil.getPriorityForCurrentThread());
+         return;
+      }
+      super.func_219100_a(chunkcoordintpair, nbttagcompound);
+   }
+   // Paper end
+
    private static String func_225402_a(CompletableFuture<Either<Chunk, ChunkHolder.IChunkLoadingError>> p_225402_0_) {
       try {
          Either<Chunk, ChunkHolder.IChunkLoadingError> either = p_225402_0_.getNow((Either<Chunk, ChunkHolder.IChunkLoadingError>)null);
@@ -802,15 +_,88 @@
    @Nullable
    private CompoundNBT func_219178_f(ChunkPos p_219178_1_) throws IOException {
       CompoundNBT compoundnbt = this.func_227078_e_(p_219178_1_);
-      return compoundnbt == null ? null : this.func_235968_a_(this.field_219255_i.func_234923_W_(), this.field_219259_m, compoundnbt);
+      // Paper start - Cache chunk status on disk
+      if (compoundnbt == null) {
+         return null;
+      }
+
+      compoundnbt = this.upgradeChunkTag(this.field_219255_i.func_234923_W_(), this.field_219259_m, compoundnbt, p_219178_1_, field_219255_i); // CraftBukkit
+      if (compoundnbt == null) {
+         return null;
+      }
+
+      this.updateChunkStatusOnDisk(p_219178_1_, compoundnbt);
+
+      return compoundnbt;
+      // Paper end
+      //return compoundnbt == null ? null : this.upgradeChunkTag(this.level.dimension(), this.overworldDataStorage, compoundnbt);
+   }
+
+
+   public void updateChunkStatusOnDisk(ChunkPos chunkPos, @Nullable CompoundNBT compound) throws IOException {
+      synchronized (this) {
+         RegionFile regionFile = this.regionFileCache.getRegionFile(chunkPos, false);
+
+         regionFile.setStatus(chunkPos.field_77276_a, chunkPos.field_77275_b, ChunkSerializer.getStatus(compound));
+      }
    }
 
    boolean func_219243_d(ChunkPos p_219243_1_) {
-      long i = p_219243_1_.func_201841_a();
-      return !this.field_219267_u.func_223494_d(i) ? true : this.field_219271_y.func_219444_a(i).noneMatch((p_219201_1_) -> {
-         return !p_219201_1_.func_175149_v() && func_219217_a(p_219243_1_, p_219201_1_) < 16384.0D;
-      });
-   }
+      return isOutsideOfRange(p_219243_1_, false);
+
+//      long i = p_219243_1_.toLong();
+//      return !this.distanceManager.hasPlayersNearby(i) ? true : this.playerMap.getPlayers(i).noneMatch((p_219201_1_) -> {
+//         return !p_219201_1_.isSpectator() && euclideanDistanceSquared(p_219243_1_, p_219201_1_) < 16384.0D;
+//      });
+   }
+
+   // Paper start - optimise isOutsideOfRange
+   final boolean isOutsideOfRange(ChunkPos chunkcoordintpair, boolean reducedRange) {
+      return this.isOutsideOfRange(this.func_219220_a(chunkcoordintpair.func_201841_a()), chunkcoordintpair, reducedRange);
+   }
+
+   final boolean isOutsideOfRange(ChunkHolder playerchunk, ChunkPos chunkcoordintpair, boolean reducedRange) {
+      // this function is so hot that removing the map lookup call can have an order of magnitude impact on its performance
+      // tested and confirmed via System.nanoTime()
+      com.destroystokyo.paper.util.misc.PooledLinkedHashSets.PooledObjectLinkedOpenHashSet<ServerPlayerEntity> playersInRange = reducedRange ? playerchunk.playersInMobSpawnRange : playerchunk.playersInChunkTickRange;
+
+      if (playersInRange == null) {
+         return true;
+      }
+
+      Object[] backingSet = playersInRange.getBackingSet();
+
+      if (reducedRange) {
+         for (int i = 0, len = backingSet.length; i < len; ++i) {
+            Object raw = backingSet[i];
+            if (!(raw instanceof ServerPlayerEntity)) {
+               continue;
+            }
+            ServerPlayerEntity player = (ServerPlayerEntity) raw;
+            // don't check spectator and whatnot, already handled by mob spawn map update
+            if (player.lastEntitySpawnRadiusSquared > func_219217_a(chunkcoordintpair, player)) {
+               return false; // in range
+            }
+         }
+      } else {
+         final double range = (TicketManager.MOB_SPAWN_RANGE * 16) * (TicketManager.MOB_SPAWN_RANGE * 16);
+         // before spigot, mob spawn range was actually mob spawn range + tick range, but it was split
+         for (int i = 0, len = backingSet.length; i < len; ++i) {
+            Object raw = backingSet[i];
+            if (!(raw instanceof ServerPlayerEntity)) {
+               continue;
+            }
+            ServerPlayerEntity player = (ServerPlayerEntity) raw;
+            // don't check spectator and whatnot, already handled by mob spawn map update
+            if (range > func_219217_a(chunkcoordintpair, player)) {
+               return false; // in range
+            }
+         }
+      }
+      // no players in range
+      return true;
+   }
+   // Paper end - optimise isOutsideOfRange
 
    private boolean func_219187_b(ServerPlayerEntity p_219187_1_) {
       return p_219187_1_.func_175149_v() && !this.field_219255_i.func_82736_K().func_223586_b(GameRules.field_223613_p);
@@ -827,27 +_,29 @@
          if (!flag) {
             this.field_219267_u.func_219341_a(SectionPos.func_218157_a(p_219234_1_), p_219234_1_);
          }
+         this.addPlayerToDistanceMaps(p_219234_1_); // Paper - distance maps
       } else {
          SectionPos sectionpos = p_219234_1_.func_213842_M();
          this.field_219271_y.func_219443_a(sectionpos.func_218155_u().func_201841_a(), p_219234_1_);
          if (!flag1) {
             this.field_219267_u.func_219367_b(sectionpos, p_219234_1_);
          }
+         this.removePlayerFromDistanceMaps(p_219234_1_); // Paper - distance maps
       }
 
-      for(int l = i - this.field_219247_A; l <= i + this.field_219247_A; ++l) {
-         for(int k = j - this.field_219247_A; k <= j + this.field_219247_A; ++k) {
-            ChunkPos chunkpos = new ChunkPos(l, k);
-            this.func_219199_a(p_219234_1_, chunkpos, new IPacket[2], !p_219234_2_, p_219234_2_);
-         }
-      }
+//      for(int l = i - this.viewDistance; l <= i + this.viewDistance; ++l) {
+//         for(int k = j - this.viewDistance; k <= j + this.viewDistance; ++k) {
+//            ChunkPos chunkpos = new ChunkPos(l, k);
+//            this.updateChunkTracking(p_219234_1_, chunkpos, new IPacket[2], !p_219234_2_, p_219234_2_);
+//         }
+//      }
 
    }
 
    private SectionPos func_223489_c(ServerPlayerEntity p_223489_1_) {
       SectionPos sectionpos = SectionPos.func_218157_a(p_223489_1_);
       p_223489_1_.func_213850_a(sectionpos);
-      p_223489_1_.field_71135_a.func_147359_a(new SUpdateChunkPositionPacket(sectionpos.func_218149_a(), sectionpos.func_218148_c()));
+      //p_223489_1_.connection.send(new SUpdateChunkPositionPacket(sectionpos.x(), sectionpos.z()));
       return sectionpos;
    }
 
@@ -892,41 +_,43 @@
          }
       }
 
-      int k = sectionpos.func_218149_a();
-      int l = sectionpos.func_218148_c();
-      if (Math.abs(k - l1) <= this.field_219247_A * 2 && Math.abs(l - i2) <= this.field_219247_A * 2) {
-         int k2 = Math.min(l1, k) - this.field_219247_A;
-         int i3 = Math.min(i2, l) - this.field_219247_A;
-         int j3 = Math.max(l1, k) + this.field_219247_A;
-         int k3 = Math.max(i2, l) + this.field_219247_A;
-
-         for(int l3 = k2; l3 <= j3; ++l3) {
-            for(int k1 = i3; k1 <= k3; ++k1) {
-               ChunkPos chunkpos1 = new ChunkPos(l3, k1);
-               boolean flag5 = func_219232_a(chunkpos1, k, l) <= this.field_219247_A;
-               boolean flag6 = func_219232_a(chunkpos1, l1, i2) <= this.field_219247_A;
-               this.func_219199_a(p_219183_1_, chunkpos1, new IPacket[2], flag5, flag6);
-            }
-         }
-      } else {
-         for(int i1 = k - this.field_219247_A; i1 <= k + this.field_219247_A; ++i1) {
-            for(int j1 = l - this.field_219247_A; j1 <= l + this.field_219247_A; ++j1) {
-               ChunkPos chunkpos = new ChunkPos(i1, j1);
-               boolean flag3 = true;
-               boolean flag4 = false;
-               this.func_219199_a(p_219183_1_, chunkpos, new IPacket[2], true, false);
-            }
-         }
-
-         for(int j2 = l1 - this.field_219247_A; j2 <= l1 + this.field_219247_A; ++j2) {
-            for(int l2 = i2 - this.field_219247_A; l2 <= i2 + this.field_219247_A; ++l2) {
-               ChunkPos chunkpos2 = new ChunkPos(j2, l2);
-               boolean flag7 = false;
-               boolean flag8 = true;
-               this.func_219199_a(p_219183_1_, chunkpos2, new IPacket[2], false, true);
-            }
-         }
-      }
+      this.updateMaps(p_219183_1_);
+
+//      int k = sectionpos.x();
+//      int l = sectionpos.z();
+//      if (Math.abs(k - l1) <= this.viewDistance * 2 && Math.abs(l - i2) <= this.viewDistance * 2) {
+//         int k2 = Math.min(l1, k) - this.viewDistance;
+//         int i3 = Math.min(i2, l) - this.viewDistance;
+//         int j3 = Math.max(l1, k) + this.viewDistance;
+//         int k3 = Math.max(i2, l) + this.viewDistance;
+//
+//         for(int l3 = k2; l3 <= j3; ++l3) {
+//            for(int k1 = i3; k1 <= k3; ++k1) {
+//               ChunkPos chunkpos1 = new ChunkPos(l3, k1);
+//               boolean flag5 = checkerboardDistance(chunkpos1, k, l) <= this.viewDistance;
+//               boolean flag6 = checkerboardDistance(chunkpos1, l1, i2) <= this.viewDistance;
+//               this.updateChunkTracking(p_219183_1_, chunkpos1, new IPacket[2], flag5, flag6);
+//            }
+//         }
+//      } else {
+//         for(int i1 = k - this.viewDistance; i1 <= k + this.viewDistance; ++i1) {
+//            for(int j1 = l - this.viewDistance; j1 <= l + this.viewDistance; ++j1) {
+//               ChunkPos chunkpos = new ChunkPos(i1, j1);
+//               boolean flag3 = true;
+//               boolean flag4 = false;
+//               this.updateChunkTracking(p_219183_1_, chunkpos, new IPacket[2], true, false);
+//            }
+//         }
+//
+//         for(int j2 = l1 - this.viewDistance; j2 <= l1 + this.viewDistance; ++j2) {
+//            for(int l2 = i2 - this.viewDistance; l2 <= i2 + this.viewDistance; ++l2) {
+//               ChunkPos chunkpos2 = new ChunkPos(j2, l2);
+//               boolean flag7 = false;
+//               boolean flag8 = true;
+//               this.updateChunkTracking(p_219183_1_, chunkpos2, new IPacket[2], false, true);
+//            }
+//         }
+//      }
 
    }
 
@@ -941,17 +_,30 @@
       });
    }
 
-   protected void func_219210_a(Entity p_219210_1_) {
-      if (!(p_219210_1_ instanceof EnderDragonPartEntity)) {
+   public void func_219210_a(Entity p_219210_1_) {
+      org.spigotmc.AsyncCatcher.catchOp("entity track"); // Spigot
+      // Paper start - ignore and warn about illegal addEntity calls instead of crashing server
+      if (p_219210_1_.field_70170_p != this.field_219255_i || this.field_219272_z.containsKey(p_219210_1_.func_145782_y())) {
+         new Throwable("[ERROR] Illegal PlayerChunkMap::addEntity for world " + this.field_219255_i.func_234923_W_().func_240901_a_()
+                 + ": " + p_219210_1_  + (this.field_219272_z.containsKey(p_219210_1_.func_145782_y()) ? " ALREADY CONTAINED (This would have crashed your server)" : ""))
+                 .printStackTrace();
+         return;
+      }
+      // GoldenForge - not needed
+      //if (p_219210_1_ instanceof ServerPlayerEntity && ((ServerPlayerEntity) p_219210_1_).supressTrackerForLogin) return; // Delay adding to tracker until after list packets
+      // Paper end
+      if (!(p_219210_1_ instanceof net.minecraftforge.entity.PartEntity)) {
          EntityType<?> entitytype = p_219210_1_.func_200600_R();
          int i = entitytype.func_233602_m_() * 16;
+         i = org.spigotmc.TrackingRange.getEntityTrackingRange(p_219210_1_, i); // Spigot
          int j = entitytype.func_220332_l();
          if (this.field_219272_z.containsKey(p_219210_1_.func_145782_y())) {
             throw (IllegalStateException)Util.func_229757_c_(new IllegalStateException("Entity is already tracked!"));
          } else {
             ChunkManager.EntityTracker chunkmanager$entitytracker = new ChunkManager.EntityTracker(p_219210_1_, i, j, entitytype.func_220340_m());
+            p_219210_1_.tracker = chunkmanager$entitytracker; // Paper - Fast access to tracker
             this.field_219272_z.put(p_219210_1_.func_145782_y(), chunkmanager$entitytracker);
-            chunkmanager$entitytracker.func_219397_a(this.field_219255_i.func_217369_A());
+            chunkmanager$entitytracker.updatePlayers(p_219210_1_.getPlayersInTrackRange());
             if (p_219210_1_ instanceof ServerPlayerEntity) {
                ServerPlayerEntity serverplayerentity = (ServerPlayerEntity)p_219210_1_;
                this.func_219234_a(serverplayerentity, true);
@@ -968,6 +_,7 @@
    }
 
    protected void func_219231_b(Entity p_219231_1_) {
+      org.spigotmc.AsyncCatcher.catchOp("entity untrack"); // Spigot
       if (p_219231_1_ instanceof ServerPlayerEntity) {
          ServerPlayerEntity serverplayerentity = (ServerPlayerEntity)p_219231_1_;
          this.func_219234_a(serverplayerentity, false);
@@ -981,10 +_,41 @@
       if (chunkmanager$entitytracker1 != null) {
          chunkmanager$entitytracker1.func_219396_a();
       }
-
-   }
+      p_219231_1_.tracker = null; // Paper - We're no longer tracked
+
+   }
+
+   // Paper start - optimised tracker
+   private final void processTrackQueue() {
+      //this.world.timings.tracker1.startTiming();
+      try {
+         for (EntityTracker tracker : this.field_219272_z.values()) {
+            // update tracker entry
+            tracker.updatePlayers(tracker.field_219403_c.getPlayersInTrackRange());
+         }
+      } finally {
+        //this.world.timings.tracker1.stopTiming();
+      }
+
+
+      //this.world.timings.tracker2.startTiming();
+      try {
+         for (EntityTracker tracker : this.field_219272_z.values()) {
+            tracker.field_219402_b.func_219453_a();
+         }
+      } finally {
+         //this.world.timings.tracker2.stopTiming();
+      }
+   }
+   // Paper end - optimised tracker
 
    protected void func_219169_g() {
+      // Paper start - optimized tracker
+      if (true) {
+         this.processTrackQueue();
+         return;
+      }
+      // Paper end - optimized tracker
       List<ServerPlayerEntity> list = Lists.newArrayList();
       List<ServerPlayerEntity> list1 = this.field_219255_i.func_217369_A();
 
@@ -1028,7 +_,7 @@
 
    }
 
-   private void func_219180_a(ServerPlayerEntity p_219180_1_, IPacket<?>[] p_219180_2_, Chunk p_219180_3_) {
+   public void func_219180_a(ServerPlayerEntity p_219180_1_, IPacket<?>[] p_219180_2_, Chunk p_219180_3_) {
       if (p_219180_2_[0] == null) {
          p_219180_2_[0] = new SChunkDataPacket(p_219180_3_, 65535);
          p_219180_2_[1] = new SUpdateLightPacket(p_219180_3_.func_76632_l(), this.field_219256_j, true);
@@ -1038,20 +_,45 @@
       DebugPacketSender.func_218802_a(this.field_219255_i, p_219180_3_.func_76632_l());
       List<Entity> list = Lists.newArrayList();
       List<Entity> list1 = Lists.newArrayList();
-
-      for(ChunkManager.EntityTracker chunkmanager$entitytracker : this.field_219272_z.values()) {
-         Entity entity = chunkmanager$entitytracker.field_219403_c;
-         if (entity != p_219180_1_ && entity.field_70176_ah == p_219180_3_.func_76632_l().field_77276_a && entity.field_70164_aj == p_219180_3_.func_76632_l().field_77275_b) {
-            chunkmanager$entitytracker.func_219400_b(p_219180_1_);
-            if (entity instanceof MobEntity && ((MobEntity)entity).func_110166_bE() != null) {
-               list.add(entity);
-            }
-
-            if (!entity.func_184188_bt().isEmpty()) {
-               list1.add(entity);
-            }
+      // Paper start - optimise entity tracker
+      // use the chunk entity list, not the whole trackedEntities map...
+      Entity[] entities = p_219180_3_.entities.getRawData();
+      for (int i = 0, size = p_219180_3_.entities.size(); i < size; ++i) {
+         Entity entity = entities[i];
+         if (entity == p_219180_1_) {
+            continue;
+         }
+         ChunkManager.EntityTracker tracker = this.field_219272_z.get(entity.func_145782_y());
+         if (tracker != null) { // dumb plugins... move on...
+            tracker.func_219400_b(p_219180_1_);
+         }
+
+         // keep the vanilla logic here - this is REQUIRED or else passengers and their vehicles disappear!
+         // (and god knows what the leash thing is)
+
+         if (entity instanceof MobEntity && ((MobEntity)entity).func_110166_bE() != null) {
+            list.add(entity);
+         }
+
+         if (!entity.field_184244_h.isEmpty()) { // Paper - do not copy list
+            list1.add(entity);
          }
       }
+      // Paper end - optimise entity tracker
+
+//      for(ChunkManager.EntityTracker chunkmanager$entitytracker : this.entityMap.values()) {
+//         Entity entity = chunkmanager$entitytracker.entity;
+//         if (entity != p_219180_1_ && entity.xChunk == p_219180_3_.getPos().x && entity.zChunk == p_219180_3_.getPos().z) {
+//            chunkmanager$entitytracker.updatePlayer(p_219180_1_);
+//            if (entity instanceof MobEntity && ((MobEntity)entity).getLeashHolder() != null) {
+//               list.add(entity);
+//            }
+//
+//            if (!entity.getPassengers().isEmpty()) {
+//               list1.add(entity);
+//            }
+//         }
+//      }
 
       if (!list.isEmpty()) {
          for(Entity entity1 : list) {
@@ -1067,7 +_,7 @@
 
    }
 
-   protected PointOfInterestManager func_219189_h() {
+   public PointOfInterestManager func_219189_h() {
       return this.field_219260_n;
    }
 
@@ -1077,12 +_,16 @@
       });
    }
 
-   class EntityTracker {
+   public class EntityTracker {
       private final TrackedEntity field_219402_b;
       private final Entity field_219403_c;
       private final int field_219404_d;
       private SectionPos field_219405_e;
-      private final Set<ServerPlayerEntity> field_219406_f = Sets.newHashSet();
+      // Paper start
+      // Replace trackedPlayers Set with a Map. The value is true until the player receives
+      // their first update (which is forced to have absolute coordinates), false afterward.
+      public java.util.Map<ServerPlayerEntity, Boolean> trackedPlayerMap = new java.util.HashMap<>();
+      private final Set<ServerPlayerEntity> field_219406_f = trackedPlayerMap.keySet();
 
       public EntityTracker(Entity p_i50468_2_, int p_i50468_3_, int p_i50468_4_, boolean p_i50468_5_) {
          this.field_219402_b = new TrackedEntity(ChunkManager.this.field_219255_i, p_i50468_2_, p_i50468_4_, p_i50468_5_, this::func_219391_a);
@@ -1091,6 +_,42 @@
          this.field_219405_e = SectionPos.func_218157_a(p_i50468_2_);
       }
 
+      // Paper start - use distance map to optimise tracker
+      com.destroystokyo.paper.util.misc.PooledLinkedHashSets.PooledObjectLinkedOpenHashSet<ServerPlayerEntity> lastTrackerCandidates;
+
+      final void updatePlayers(com.destroystokyo.paper.util.misc.PooledLinkedHashSets.PooledObjectLinkedOpenHashSet<ServerPlayerEntity> newTrackerCandidates) {
+         com.destroystokyo.paper.util.misc.PooledLinkedHashSets.PooledObjectLinkedOpenHashSet<ServerPlayerEntity> oldTrackerCandidates = this.lastTrackerCandidates;
+         this.lastTrackerCandidates = newTrackerCandidates;
+
+         if (newTrackerCandidates != null) {
+            Object[] rawData = newTrackerCandidates.getBackingSet();
+            for (int i = 0, len = rawData.length; i < len; ++i) {
+               Object raw = rawData[i];
+               if (!(raw instanceof ServerPlayerEntity)) {
+                  continue;
+               }
+               ServerPlayerEntity player = (ServerPlayerEntity)raw;
+               this.func_219400_b(player);
+            }
+         }
+
+         if (oldTrackerCandidates == newTrackerCandidates) {
+            // this is likely the case.
+            // means there has been no range changes, so we can just use the above for tracking.
+            return;
+         }
+
+         // stuff could have been removed, so we need to check the trackedPlayers set
+         // for players that were removed
+
+         for (ServerPlayerEntity player : this.field_219406_f.toArray(new ServerPlayerEntity[0])) { // avoid CME
+            if (newTrackerCandidates == null || !newTrackerCandidates.contains(player)) {
+               this.func_219400_b(player);
+            }
+         }
+      }
+      // Paper end - use distance map to optimise tracker
+
       public boolean equals(Object p_equals_1_) {
          if (p_equals_1_ instanceof ChunkManager.EntityTracker) {
             return ((ChunkManager.EntityTracker)p_equals_1_).field_219403_c.func_145782_y() == this.field_219403_c.func_145782_y();
@@ -1126,6 +_,7 @@
       }
 
       public void func_219399_a(ServerPlayerEntity p_219399_1_) {
+         org.spigotmc.AsyncCatcher.catchOp("player tracker clear"); // Spigot
          if (this.field_219406_f.remove(p_219399_1_)) {
             this.field_219402_b.func_219454_a(p_219399_1_);
          }
@@ -1133,21 +_,28 @@
       }
 
       public void func_219400_b(ServerPlayerEntity p_219400_1_) {
+         org.spigotmc.AsyncCatcher.catchOp("player tracker update"); // Spigot
          if (p_219400_1_ != this.field_219403_c) {
-            Vector3d vector3d = p_219400_1_.func_213303_ch().func_178788_d(this.field_219402_b.func_219456_b());
+            //Vector3d vector3d = p_219400_1_.position().subtract(this.serverEntity.sentPos());
+            // Paper start - remove allocation of Vec3D here
+            //Vec3D vec3d = entityplayer.getPositionVector().d(this.tracker.getPositionVector()); // MC-155077, SPIGOT-5113
+            double vec3d_dx = p_219400_1_.func_226277_ct_() - this.field_219403_c.func_226277_ct_();
+            double vec3d_dy = p_219400_1_.func_226278_cu_() - this.field_219403_c.func_226278_cu_();
+            double vec3d_dz = p_219400_1_.func_226281_cx_() - this.field_219403_c.func_226281_cx_();
+            // Paper end - remove allocation of Vec3D here
             int i = Math.min(this.func_229843_b_(), (ChunkManager.this.field_219247_A - 1) * 16);
-            boolean flag = vector3d.field_72450_a >= (double)(-i) && vector3d.field_72450_a <= (double)i && vector3d.field_72449_c >= (double)(-i) && vector3d.field_72449_c <= (double)i && this.field_219403_c.func_174827_a(p_219400_1_);
+            boolean flag = vec3d_dx >= (double) (-i) && vec3d_dx <= (double) i && vec3d_dz >= (double) (-i) && vec3d_dz <= (double)i && this.field_219403_c.func_174827_a(p_219400_1_);
             if (flag) {
                boolean flag1 = this.field_219403_c.field_98038_p;
                if (!flag1) {
                   ChunkPos chunkpos = new ChunkPos(this.field_219403_c.field_70176_ah, this.field_219403_c.field_70164_aj);
                   ChunkHolder chunkholder = ChunkManager.this.func_219219_b(chunkpos.func_201841_a());
-                  if (chunkholder != null && chunkholder.func_219298_c() != null) {
+                  if (chunkholder != null && chunkholder.getSendingChunk() != null) {
                      flag1 = ChunkManager.func_219215_b(chunkpos, p_219400_1_, false) <= ChunkManager.this.field_219247_A;
                   }
                }
 
-               if (flag1 && this.field_219406_f.add(p_219400_1_)) {
+               if (flag1 && this.trackedPlayerMap.putIfAbsent(p_219400_1_, true) == null) {
                   this.field_219402_b.func_219455_b(p_219400_1_);
                }
             } else if (this.field_219406_f.remove(p_219400_1_)) {
@@ -1167,7 +_,8 @@
 
          for(Entity entity : collection) {
             int j = entity.func_200600_R().func_233602_m_() * 16;
-            if (j > i) {
+            j = org.spigotmc.TrackingRange.getEntityTrackingRange(entity, j); // Paper
+            if (j < i) { // Paper - we need the lowest range thanks to the fact that our tracker doesn't account for passenger logic
                i = j;
             }
          }
