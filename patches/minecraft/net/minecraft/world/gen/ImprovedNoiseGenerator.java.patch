--- a/net/minecraft/world/gen/ImprovedNoiseGenerator.java
+++ b/net/minecraft/world/gen/ImprovedNoiseGenerator.java
@@ -2,12 +_,19 @@
 
 import java.util.Random;
 import net.minecraft.util.math.MathHelper;
+import org.apache.commons.math3.util.FastMath;
 
 public final class ImprovedNoiseGenerator {
    private final byte[] field_76312_d;
    public final double field_76315_a;
    public final double field_76313_b;
    public final double field_76314_c;
+   // Yatopia start - Faster Perlin
+   private static final int GRADIENT_STRIDE = 4;
+   private static final int GRADIENT_STRIDE_SH = 2;
+
+   private final byte[] gradientTable = new byte[256 * GRADIENT_STRIDE];
+   // Yatopia end
 
    public ImprovedNoiseGenerator(Random p_i45469_1_) {
       this.field_76315_a = p_i45469_1_.nextDouble() * 256.0D;
@@ -15,41 +_,171 @@
       this.field_76314_c = p_i45469_1_.nextDouble() * 256.0D;
       this.field_76312_d = new byte[256];
 
-      for(int i = 0; i < 256; ++i) {
+      int i;
+
+      for(i = 0; i < 256; ++i) {
          this.field_76312_d[i] = (byte)i;
       }
 
-      for(int k = 0; k < 256; ++k) {
-         int j = p_i45469_1_.nextInt(256 - k);
-         byte b0 = this.field_76312_d[k];
-         this.field_76312_d[k] = this.field_76312_d[k + j];
-         this.field_76312_d[k + j] = b0;
-      }
+      for(i = 0; i < 256; ++i) {
+         int j = p_i45469_1_.nextInt(256 - i);
+         byte b0 = this.field_76312_d[i];
+         this.field_76312_d[i] = this.field_76312_d[i + j];
+         this.field_76312_d[i + j] = b0;
+      }
+
+      // Yatopia start
+      for (i = 0; i < 256; i++) {
+         int hash = this.field_76312_d[i & 255] & 15;
+
+         for (int j = 0; j < 3; j++) {
+            this.gradientTable[(i * GRADIENT_STRIDE) + j] = (byte) SimplexNoiseGenerator.field_215468_a[hash][j];
+         }
+      }
+      // Yatopia end
 
    }
 
    public double func_215456_a(double p_215456_1_, double p_215456_3_, double p_215456_5_, double p_215456_7_, double p_215456_9_) {
-      double d0 = p_215456_1_ + this.field_76315_a;
-      double d1 = p_215456_3_ + this.field_76313_b;
-      double d2 = p_215456_5_ + this.field_76314_c;
-      int i = MathHelper.func_76128_c(d0);
-      int j = MathHelper.func_76128_c(d1);
-      int k = MathHelper.func_76128_c(d2);
-      double d3 = d0 - (double)i;
-      double d4 = d1 - (double)j;
-      double d5 = d2 - (double)k;
-      double d6 = MathHelper.func_219801_j(d3);
-      double d7 = MathHelper.func_219801_j(d4);
-      double d8 = MathHelper.func_219801_j(d5);
-      double d9;
-      if (p_215456_7_ != 0.0D) {
-         double d10 = Math.min(p_215456_9_, d4);
-         d9 = (double)MathHelper.func_76128_c(d10 / p_215456_7_) * p_215456_7_;
-      } else {
-         d9 = 0.0D;
-      }
-
-      return this.func_215459_a(i, j, k, d3, d4 - d9, d5, d6, d7, d8);
+
+      final double ox = p_215456_1_ + this.field_76315_a;
+      final double oy = p_215456_3_ + this.field_76313_b;
+      final double oz = p_215456_5_ + this.field_76314_c;
+
+      final double fox = FastMath.floor(ox);
+      final double foy = FastMath.floor(oy);
+      final double foz = FastMath.floor(oz);
+
+      final double oox = ox - fox;
+      double ooy = oy - foy;
+      final double ooz = oz - foz;
+
+      final double fx = oox * oox * oox * (oox * (oox * 6.0 - 15.0) + 10.0);
+      final double fy = ooy * ooy * ooy * (ooy * (ooy * 6.0 - 15.0) + 10.0);
+      final double fz = ooz * ooz * ooz * (ooz * (ooz * 6.0 - 15.0) + 10.0);
+
+      if (p_215456_7_ != 0.0D) { ooy = ooy - (FastMath.floor(FastMath.min(p_215456_9_, ooy) / p_215456_7_) * p_215456_7_); }
+
+      final int sectionX = (int) fox;
+      final int sectionY = (int) foy;
+      final int sectionZ = (int) foz;
+
+      final byte[] perm = this.field_76312_d;
+
+      final int i = (perm[sectionX & 255] & 255) + sectionY;
+      final int l = (perm[(sectionX + 1) & 255] & 255) + sectionY;
+
+      final int j = (perm[255 & i] & 255) + sectionZ;
+      final int m = (perm[l & 255] & 255) + sectionZ;
+
+      final int k = (perm[(i + 1) & 255] & 255) + sectionZ;
+      final int n = (perm[(l + 1) & 255] & 255) + sectionZ;
+
+      final double localX2 = oox - 1.0D;
+      final double localY2 = ooy - 1.0D;
+      final double localZ2 = ooz - 1.0D;
+
+      final int d00 = (j & 255) << GRADIENT_STRIDE_SH;
+      final int d01 = (m & 255) << GRADIENT_STRIDE_SH;
+      final int d02 = (k & 255) << GRADIENT_STRIDE_SH;
+      final int d03 = (n & 255) << GRADIENT_STRIDE_SH;
+
+      final int d10 = ((j + 1) & 255) << GRADIENT_STRIDE_SH;
+      final int d11 = ((m + 1) & 255) << GRADIENT_STRIDE_SH;
+      final int d12 = ((k + 1) & 255) << GRADIENT_STRIDE_SH;
+      final int d13 = ((n + 1) & 255) << GRADIENT_STRIDE_SH;
+
+      final byte[] grad = this.gradientTable;
+
+      final double g00x = grad[d00] * oox;
+      final double g00y = grad[d00 + 1] * ooy;
+      final double g00z = grad[d00 + 2] * ooz;
+
+      final double g01x = grad[d01] * localX2;
+      final double g01y = grad[d01 + 1] * ooy;
+      final double g01z = grad[d01 + 2] * ooz;
+
+      final double g02x = grad[d02] * oox;
+      final double g02y = grad[d02 + 1] * localY2;
+      final double g02z = grad[d02 + 2] * ooz;
+
+      final double g03x = grad[d03] * localX2;
+      final double g03y = grad[d03 + 1] * localY2;
+      final double g03z = grad[d03 + 2] * ooz;
+
+      final double g10x = grad[d10] * oox;
+      final double g10y = grad[d10 + 1] * ooy;
+      final double g10z = grad[d10 + 2] * localZ2;
+
+      final double g11x = grad[d11] * localX2;
+      final double g11y = grad[d11 + 1] * ooy;
+      final double g11z = grad[d11 + 2] * localZ2;
+
+      final double g12x = grad[d12] * oox;
+      final double g12y = grad[d12 + 1] * localY2;
+      final double g12z = grad[d12 + 2] * localZ2;
+
+      final double g13x = grad[d13] * localX2;
+      final double g13y = grad[d13 + 1] * localY2;
+      final double g13z = grad[d13 + 2] * localZ2;
+
+      final double g00 = g00x + g00y + g00z;
+      final double g01 = g01x + g01y + g01z;
+      final double g02 = g02x + g02y + g02z;
+      final double g03 = g03x + g03y + g03z;
+      final double g10 = g10x + g10y + g10z;
+      final double g11 = g11x + g11y + g11z;
+      final double g12 = g12x + g12y + g12z;
+      final double g13 = g13x + g13y + g13z;
+
+      final double ba1 = g01 - g00;
+      final double ba2 = g11 - g10;
+      final double dc1 = g03 - g02;
+      final double dc2 = g13 - g12;
+
+      final double dba1 = fx * ba1;
+      final double dba2 = fx * ba2;
+      final double ddc1 = fx * dc1;
+      final double ddc2 = fx * dc2;
+
+      final double dd0 = g00 + dba1;
+      final double dd1 = g10 + dba2;
+      final double dd2 = g02 + ddc1;
+      final double dd3 = g12 + ddc2;
+
+      final double aa0 = dd2 - dd0;
+      final double aa1 = dd3 - dd1;
+
+      final double y20 = fy * aa0;
+      final double y31 = fy * aa1;
+
+      final double aa2 = dd0 + y20;
+      final double aa3 = dd1 + y31;
+
+      return dd0 + y20 + (fz * (aa3 - aa2));
+      // Yatopia end
+
+//      double d0 = p_215456_1_ + this.xo;
+//      double d1 = p_215456_3_ + this.yo;
+//      double d2 = p_215456_5_ + this.zo;
+//      int i = MathHelper.floor(d0);
+//      int j = MathHelper.floor(d1);
+//      int k = MathHelper.floor(d2);
+//      double d3 = d0 - (double)i;
+//      double d4 = d1 - (double)j;
+//      double d5 = d2 - (double)k;
+//      double d6 = MathHelper.smoothstep(d3);
+//      double d7 = MathHelper.smoothstep(d4);
+//      double d8 = MathHelper.smoothstep(d5);
+//      double d9;
+//      if (p_215456_7_ != 0.0D) {
+//         double d10 = Math.min(p_215456_9_, d4);
+//         d9 = (double)MathHelper.floor(d10 / p_215456_7_) * p_215456_7_;
+//      } else {
+//         d9 = 0.0D;
+//      }
+//
+//      return this.sampleAndLerp(i, j, k, d3, d4 - d9, d5, d6, d7, d8);
    }
 
    private static double func_215457_a(int p_215457_0_, double p_215457_1_, double p_215457_3_, double p_215457_5_) {
