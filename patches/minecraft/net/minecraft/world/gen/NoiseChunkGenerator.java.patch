--- a/net/minecraft/world/gen/NoiseChunkGenerator.java
+++ b/net/minecraft/world/gen/NoiseChunkGenerator.java
@@ -34,16 +_,16 @@
 import net.minecraft.world.chunk.IChunk;
 import net.minecraft.world.gen.feature.jigsaw.JigsawJunction;
 import net.minecraft.world.gen.feature.jigsaw.JigsawPattern;
-import net.minecraft.world.gen.feature.structure.AbstractVillagePiece;
-import net.minecraft.world.gen.feature.structure.Structure;
-import net.minecraft.world.gen.feature.structure.StructureManager;
-import net.minecraft.world.gen.feature.structure.StructurePiece;
+import net.minecraft.world.gen.feature.structure.*;
 import net.minecraft.world.gen.settings.NoiseSettings;
 import net.minecraft.world.spawner.WorldEntitySpawner;
 import net.minecraftforge.api.distmarker.Dist;
 import net.minecraftforge.api.distmarker.OnlyIn;
+import org.apache.commons.math3.util.FastMath;
 
 public final class NoiseChunkGenerator extends ChunkGenerator {
+
+   private int cachedSeaLevel; // Yatopia - lithium cache chunk gen settings
    public static final Codec<NoiseChunkGenerator> field_236079_d_ = RecordCodecBuilder.create((p_236091_0_) -> {
       return p_236091_0_.group(BiomeProvider.field_235202_a_.fieldOf("biome_source").forGetter((p_236096_0_) -> {
          return p_236096_0_.field_222542_c;
@@ -124,7 +_,7 @@
       } else {
          this.field_236083_v_ = null;
       }
-
+      this.cachedSeaLevel = ((DimensionSettings) this.field_236080_h_.get()).func_236119_g_(); // Yatopia - lithium cache chunk gen settings
    }
 
    protected Codec<? extends ChunkGenerator> func_230347_a_() {
@@ -140,39 +_,123 @@
       return this.field_236084_w_ == p_236088_1_ && this.field_236080_h_.get().func_242744_a(p_236088_3_);
    }
 
+   // Yatopia start
+   private static double sampleOctave(ImprovedNoiseGenerator sampler, double x, double y, double z, double scaledVerticalSize, double scaledY, double frequency) {
+      return sampler.func_215456_a(x, y, z, scaledVerticalSize, scaledY) / frequency;
+   }
+   // Yatopia end
+
    private double func_222552_a(int p_222552_1_, int p_222552_2_, int p_222552_3_, double p_222552_4_, double p_222552_6_, double p_222552_8_, double p_222552_10_) {
-      double d0 = 0.0D;
-      double d1 = 0.0D;
-      double d2 = 0.0D;
-      boolean flag = true;
-      double d3 = 1.0D;
-
-      for(int i = 0; i < 16; ++i) {
-         double d4 = OctavesNoiseGenerator.func_215461_a((double)p_222552_1_ * p_222552_4_ * d3);
-         double d5 = OctavesNoiseGenerator.func_215461_a((double)p_222552_2_ * p_222552_6_ * d3);
-         double d6 = OctavesNoiseGenerator.func_215461_a((double)p_222552_3_ * p_222552_4_ * d3);
-         double d7 = p_222552_6_ * d3;
-         ImprovedNoiseGenerator improvednoisegenerator = this.field_222568_o.func_215463_a(i);
-         if (improvednoisegenerator != null) {
-            d0 += improvednoisegenerator.func_215456_a(d4, d5, d6, d7, (double)p_222552_2_ * d7) / d3;
-         }
-
-         ImprovedNoiseGenerator improvednoisegenerator1 = this.field_222569_p.func_215463_a(i);
-         if (improvednoisegenerator1 != null) {
-            d1 += improvednoisegenerator1.func_215456_a(d4, d5, d6, d7, (double)p_222552_2_ * d7) / d3;
-         }
-
-         if (i < 8) {
-            ImprovedNoiseGenerator improvednoisegenerator2 = this.field_222570_q.func_215463_a(i);
-            if (improvednoisegenerator2 != null) {
-               d2 += improvednoisegenerator2.func_215456_a(OctavesNoiseGenerator.func_215461_a((double)p_222552_1_ * p_222552_8_ * d3), OctavesNoiseGenerator.func_215461_a((double)p_222552_2_ * p_222552_10_ * d3), OctavesNoiseGenerator.func_215461_a((double)p_222552_3_ * p_222552_8_ * d3), p_222552_10_ * d3, (double)p_222552_2_ * p_222552_10_ * d3) / d3;
-            }
-         }
-
-         d3 /= 2.0D;
-      }
-
-      return MathHelper.func_151238_b(d0 / 512.0D, d1 / 512.0D, (d2 / 10.0D + 1.0D) / 2.0D);
+
+      double frequency = 1.0;
+      double interpolationValue = 0.0;
+
+      // Calculate interpolation data to decide what noise to sample.
+      for (int octave = 0; octave < 8; octave++) {
+         double scaledVerticalScale = p_222552_10_ * frequency;
+         double scaledY = p_222552_2_ * scaledVerticalScale;
+
+         interpolationValue += sampleOctave(this.field_222570_q.func_215463_a(octave),
+                 OctavesNoiseGenerator.func_215461_a(p_222552_1_ * p_222552_8_ * frequency),
+                 OctavesNoiseGenerator.func_215461_a(scaledY),
+                 OctavesNoiseGenerator.func_215461_a(p_222552_3_ * p_222552_8_ * frequency), scaledVerticalScale, scaledY, frequency);
+
+         frequency /= 2.0;
+      }
+
+      double clampedInterpolation = (interpolationValue / 10.0 + 1.0) / 2.0;
+
+      if (clampedInterpolation >= 1) {
+         // Sample only upper noise, as the lower noise will be interpolated out.
+         frequency = 1.0;
+         double noise = 0.0;
+         for (int octave = 0; octave < 16; octave++) {
+            double scaledVerticalScale = p_222552_6_ * frequency;
+            double scaledY = p_222552_2_ * scaledVerticalScale;
+
+            noise += sampleOctave(this.field_222569_p.func_215463_a(octave),
+                    OctavesNoiseGenerator.func_215461_a(p_222552_1_ * p_222552_4_ * frequency),
+                    OctavesNoiseGenerator.func_215461_a(scaledY),
+                    OctavesNoiseGenerator.func_215461_a(p_222552_3_ * p_222552_4_ * frequency), scaledVerticalScale, scaledY, frequency);
+
+            frequency /= 2.0;
+         }
+
+         return noise / 512.0;
+      } else if (clampedInterpolation <= 0) {
+         // Sample only lower noise, as the upper noise will be interpolated out.
+         frequency = 1.0;
+         double noise = 0.0;
+         for (int octave = 0; octave < 16; octave++) {
+            double scaledVerticalScale = p_222552_6_ * frequency;
+            double scaledY = p_222552_2_ * scaledVerticalScale;
+            noise += sampleOctave(this.field_222568_o.func_215463_a(octave),
+                    OctavesNoiseGenerator.func_215461_a(p_222552_1_ * p_222552_4_ * frequency),
+                    OctavesNoiseGenerator.func_215461_a(scaledY),
+                    OctavesNoiseGenerator.func_215461_a(p_222552_3_ * p_222552_4_ * frequency), scaledVerticalScale, scaledY, frequency);
+
+            frequency /= 2.0;
+         }
+
+         return noise / 512.0;
+      } else {
+         // [VanillaCopy] SurfaceChunkGenerator#sampleNoise
+         // Sample both and interpolate, as in vanilla.
+
+         frequency = 1.0;
+         double lowerNoise = 0.0;
+         double upperNoise = 0.0;
+
+         for (int octave = 0; octave < 16; octave++) {
+            // Pre calculate these values to share them
+            double scaledVerticalScale = p_222552_6_ * frequency;
+            double scaledY = p_222552_2_ * scaledVerticalScale;
+            double xVal = OctavesNoiseGenerator.func_215461_a(p_222552_1_ * p_222552_4_ * frequency);
+            double yVal = OctavesNoiseGenerator.func_215461_a(scaledY);
+            double zVal = OctavesNoiseGenerator.func_215461_a(p_222552_3_ * p_222552_4_ * frequency);
+
+            upperNoise += sampleOctave(this.field_222569_p.func_215463_a(octave), xVal, yVal, zVal, scaledVerticalScale, scaledY, frequency);
+            lowerNoise += sampleOctave(this.field_222568_o.func_215463_a(octave), xVal, yVal, zVal, scaledVerticalScale, scaledY, frequency);
+
+            frequency /= 2.0;
+         }
+
+         // Vanilla behavior, return interpolated noise
+         return MathHelper.func_151238_b(clampedInterpolation, lowerNoise / 512.0, upperNoise / 512.0);
+      }
+
+//      double d0 = 0.0D;
+//      double d1 = 0.0D;
+//      double d2 = 0.0D;
+//      boolean flag = true;
+//      double d3 = 1.0D;
+//
+//      for(int i = 0; i < 16; ++i) {
+//         double d4 = OctavesNoiseGenerator.wrap((double)p_222552_1_ * p_222552_4_ * d3);
+//         double d5 = OctavesNoiseGenerator.wrap((double)p_222552_2_ * p_222552_6_ * d3);
+//         double d6 = OctavesNoiseGenerator.wrap((double)p_222552_3_ * p_222552_4_ * d3);
+//         double d7 = p_222552_6_ * d3;
+//         ImprovedNoiseGenerator improvednoisegenerator = this.minLimitPerlinNoise.getOctaveNoise(i);
+//         if (improvednoisegenerator != null) {
+//            d0 += improvednoisegenerator.noise(d4, d5, d6, d7, (double)p_222552_2_ * d7) / d3;
+//         }
+//
+//         ImprovedNoiseGenerator improvednoisegenerator1 = this.maxLimitPerlinNoise.getOctaveNoise(i);
+//         if (improvednoisegenerator1 != null) {
+//            d1 += improvednoisegenerator1.noise(d4, d5, d6, d7, (double)p_222552_2_ * d7) / d3;
+//         }
+//
+//         if (i < 8) {
+//            ImprovedNoiseGenerator improvednoisegenerator2 = this.mainPerlinNoise.getOctaveNoise(i);
+//            if (improvednoisegenerator2 != null) {
+//               d2 += improvednoisegenerator2.noise(OctavesNoiseGenerator.wrap((double)p_222552_1_ * p_222552_8_ * d3), OctavesNoiseGenerator.wrap((double)p_222552_2_ * p_222552_10_ * d3), OctavesNoiseGenerator.wrap((double)p_222552_3_ * p_222552_8_ * d3), p_222552_10_ * d3, (double)p_222552_2_ * p_222552_10_ * d3) / d3;
+//            }
+//         }
+//
+//         d3 /= 2.0D;
+//      }
+//
+//      return MathHelper.clampedLerp(d0 / 512.0D, d1 / 512.0D, (d2 / 10.0D + 1.0D) / 2.0D);
    }
 
    private double[] func_222547_b(int p_222547_1_, int p_222547_2_) {
@@ -295,10 +_,10 @@
    }
 
    private int func_236087_a_(int p_236087_1_, int p_236087_2_, @Nullable BlockState[] p_236087_3_, @Nullable Predicate<BlockState> p_236087_4_) {
-      int i = Math.floorDiv(p_236087_1_, this.field_222564_k);
-      int j = Math.floorDiv(p_236087_2_, this.field_222564_k);
-      int k = Math.floorMod(p_236087_1_, this.field_222564_k);
-      int l = Math.floorMod(p_236087_2_, this.field_222564_k);
+      int i = FastMath.floorDiv(p_236087_1_, this.field_222564_k);
+      int j = FastMath.floorDiv(p_236087_2_, this.field_222564_k);
+      int k = FastMath.floorMod(p_236087_1_, this.field_222564_k);
+      int l = FastMath.floorMod(p_236087_2_, this.field_222564_k);
       double d0 = (double)k / (double)this.field_222564_k;
       double d1 = (double)l / (double)this.field_222564_k;
       double[][] adouble = new double[][]{this.func_222547_b(i, j), this.func_222547_b(i, j + 1), this.func_222547_b(i + 1, j), this.func_222547_b(i + 1, j + 1)};
@@ -411,8 +_,10 @@
       int l = j << 4;
 
       for(Structure<?> structure : Structure.field_236384_t_) {
-         p_230352_2_.func_235011_a_(SectionPos.func_218156_a(chunkpos, 0), structure).forEach((p_236089_5_) -> {
-            for(StructurePiece structurepiece1 : p_236089_5_.func_186161_c()) {
+
+         for (StructureStart<?> structurestart : p_230352_2_.getFeatureStarts(SectionPos.func_218156_a(chunkpos, 0), structure)) { // Paper - remove structure streams
+
+            for(StructurePiece structurepiece1 : structurestart.func_186161_c()) {
                if (structurepiece1.func_214810_a(chunkpos, 12)) {
                   if (structurepiece1 instanceof AbstractVillagePiece) {
                      AbstractVillagePiece abstractvillagepiece = (AbstractVillagePiece)structurepiece1;
@@ -434,7 +_,31 @@
                }
             }
 
-         });
+         }
+//         p_230352_2_.startsForFeature(SectionPos.of(chunkpos, 0), structure).forEach((p_236089_5_) -> {
+//            for(StructurePiece structurepiece1 : p_236089_5_.getPieces()) {
+//               if (structurepiece1.isCloseToChunk(chunkpos, 12)) {
+//                  if (structurepiece1 instanceof AbstractVillagePiece) {
+//                     AbstractVillagePiece abstractvillagepiece = (AbstractVillagePiece)structurepiece1;
+//                     JigsawPattern.PlacementBehaviour jigsawpattern$placementbehaviour = abstractvillagepiece.getElement().getProjection();
+//                     if (jigsawpattern$placementbehaviour == JigsawPattern.PlacementBehaviour.RIGID) {
+//                        objectlist.add(abstractvillagepiece);
+//                     }
+//
+//                     for(JigsawJunction jigsawjunction1 : abstractvillagepiece.getJunctions()) {
+//                        int l5 = jigsawjunction1.getSourceX();
+//                        int i6 = jigsawjunction1.getSourceZ();
+//                        if (l5 > k - 12 && i6 > l - 12 && l5 < k + 15 + 12 && i6 < l + 15 + 12) {
+//                           objectlist1.add(jigsawjunction1);
+//                        }
+//                     }
+//                  } else {
+//                     objectlist.add(structurepiece1);
+//                  }
+//               }
+//            }
+//
+//         });
       }
 
       double[][][] adouble = new double[2][this.field_222567_n + 1][this.field_222566_m + 1];
@@ -525,8 +_,8 @@
                         objectlistiterator1.back(objectlist1.size());
                         BlockState blockstate = this.func_236086_a_(d18, i2);
                         if (blockstate != field_222562_i) {
-                           if (blockstate.func_185906_d() != 0) {
-                              blockpos$mutable.func_181079_c(i3, i2, l3);
+                           blockpos$mutable.func_181079_c(i3, i2, l3);
+                           if (blockstate.getLightValue(chunkprimer, blockpos$mutable) != 0) {
                               chunkprimer.func_201637_h(blockpos$mutable);
                            }
 
@@ -578,10 +_,14 @@
    }
 
    public int func_230356_f_() {
-      return this.field_236080_h_.get().func_236119_g_();
+      //return this.settings.get().seaLevel();
+      return this.cachedSeaLevel;
    }
 
    public List<MobSpawnInfo.Spawners> func_230353_a_(Biome p_230353_1_, StructureManager p_230353_2_, EntityClassification p_230353_3_, BlockPos p_230353_4_) {
+      List<MobSpawnInfo.Spawners> spawns = net.minecraftforge.common.world.StructureSpawnManager.getStructureSpawns(p_230353_2_, p_230353_3_, p_230353_4_);
+      if (spawns != null) return spawns;
+      if (false) {//Forge: We handle these hardcoded cases above in StructureSpawnManager#getStructureSpawns, but allow for insideOnly to be changed and allow for creatures to be spawned in ones other than just the witch hut
       if (p_230353_2_.func_235010_a_(p_230353_4_, true, Structure.field_236374_j_).func_75069_d()) {
          if (p_230353_3_ == EntityClassification.MONSTER) {
             return Structure.field_236374_j_.func_202279_e();
@@ -604,6 +_,7 @@
          if (p_230353_2_.func_235010_a_(p_230353_4_, true, Structure.field_236378_n_).func_75069_d()) {
             return Structure.field_236378_n_.func_202279_e();
          }
+      }
       }
 
       return super.func_230353_a_(p_230353_1_, p_230353_2_, p_230353_3_, p_230353_4_);
