--- a/net/minecraft/world/chunk/storage/RegionFile.java
+++ b/net/minecraft/world/chunk/storage/RegionFile.java
@@ -21,6 +_,7 @@
 import javax.annotation.Nullable;
 import net.minecraft.util.Util;
 import net.minecraft.util.math.ChunkPos;
+import net.minecraft.world.chunk.ChunkStatus;
 import org.apache.logging.log4j.LogManager;
 import org.apache.logging.log4j.Logger;
 
@@ -36,12 +_,40 @@
    @VisibleForTesting
    protected final RegionBitmap field_227128_i_ = new RegionBitmap();
 
+   public final File javaFile; // Paper
+   public final java.util.concurrent.locks.ReentrantLock fileLock = new java.util.concurrent.locks.ReentrantLock(true); // Paper
+
+   // Paper start - Cache chunk status
+   private final ChunkStatus[] statuses = new ChunkStatus[32 * 32];
+
+   private boolean closed;
+
+   // invoked on write/read
+   public void setStatus(int x, int z, ChunkStatus status) {
+      if (this.closed) {
+         // We've used an invalid region file.
+         throw new IllegalStateException("RegionFile is closed");
+      }
+      this.statuses[getOffsetIndex(x, z)] = status;
+   }
+
+   public ChunkStatus getStatusIfCached(int x, int z) {
+      if (this.closed) {
+         // We've used an invalid region file.
+         throw new IllegalStateException("RegionFile is closed");
+      }
+      final int location = getOffsetIndex(x, z);
+      return this.statuses[location];
+   }
+   // Paper end
+
    public RegionFile(File p_i231893_1_, File p_i231893_2_, boolean p_i231893_3_) throws IOException {
       this(p_i231893_1_.toPath(), p_i231893_2_.toPath(), RegionFileVersion.field_227159_b_, p_i231893_3_);
    }
 
    public RegionFile(Path p_i231894_1_, Path p_i231894_2_, RegionFileVersion p_i231894_3_, boolean p_i231894_4_) throws IOException {
       this.field_227125_e_ = p_i231894_3_;
+      this.javaFile = p_i231894_1_.toFile(); // Paper
       if (!Files.isDirectory(p_i231894_2_)) {
          throw new IllegalArgumentException("Expected directory, got " + p_i231894_2_.toAbsolutePath());
       } else {
@@ -188,7 +_,7 @@
       return (p_227144_0_ + 4096 - 1) / 4096;
    }
 
-   public boolean func_222662_b(ChunkPos p_222662_1_) {
+   public synchronized boolean func_222662_b(ChunkPos p_222662_1_) {
       int i = this.func_222660_e(p_222662_1_);
       if (i == 0) {
          return false;
@@ -231,6 +_,7 @@
                return true;
             }
          } catch (IOException ioexception) {
+            //TODO: // Paper - we want the upper try/catch to retry this
             return false;
          }
       }
@@ -290,10 +_,29 @@
 
    private RegionFile.ICompleteCallback func_227138_a_(Path p_227138_1_, ByteBuffer p_227138_2_) throws IOException {
       Path path = Files.createTempFile(this.field_227124_d_, "tmp", (String)null);
+      FileChannel filechannel = FileChannel.open(path, StandardOpenOption.CREATE, StandardOpenOption.WRITE);
+      Throwable throwable = null;
 
-      try (FileChannel filechannel = FileChannel.open(path, StandardOpenOption.CREATE, StandardOpenOption.WRITE)) {
+      try {
          ((Buffer)p_227138_2_).position(5);
          filechannel.write(p_227138_2_);
+      } catch (Throwable throwable1) {
+         throwable = throwable1;
+         //TODO: com.destroystokyo.paper.exception.ServerInternalException.reportInternalException(throwable); // Paper
+         throw throwable1;
+      } finally {
+         if (filechannel != null) {
+            if (throwable != null) {
+               try {
+                  filechannel.close();
+               } catch (Throwable throwable2) {
+                  throwable.addSuppressed(throwable2);
+               }
+            } else {
+               filechannel.close();
+            }
+         }
+
       }
 
       return () -> {
@@ -314,21 +_,32 @@
       return this.func_222660_e(p_222667_1_) != 0;
    }
 
+   private static int getOffsetIndex(int x, int z) { return (x & 31) + (z & 31) * 32; } // Paper - OBFHELPER - sort of, mirror of logic below
    private static int func_222668_f(ChunkPos p_222668_0_) {
       return p_222668_0_.func_222240_j() + p_222668_0_.func_222238_k() * 32;
    }
 
    public void close() throws IOException {
-      try {
-         this.func_227143_c_();
-      } finally {
+      // Paper start - Prevent regionfiles from being closed during use
+      this.fileLock.lock();
+
+      synchronized (this) {
          try {
-            this.field_76719_c.force(true);
-         } finally {
-            this.field_76719_c.close();
+            // Paper end
+            this.closed = true; // Paper
+            try {
+               this.func_227143_c_();
+            } finally {
+               try {
+                  this.field_76719_c.force(true);
+               } finally {
+                  this.field_76719_c.close();
+               }
+            }
+         } finally { // Paper start - Prevent regionfiles from being closed during use
+            this.fileLock.unlock();
          }
-      }
-
+      } // Paper end
    }
 
    private void func_227143_c_() throws IOException {
